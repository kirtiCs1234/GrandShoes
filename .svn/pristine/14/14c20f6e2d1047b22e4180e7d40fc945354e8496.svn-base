using DAL;
using Helper;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using System.Web.Http.Description;
using static Helper.CommonFunction;

namespace POSApi.Controllers
{
    [RoutePrefix("api/user")]
    public class UsersController : ApiController
    {
        private GrandShoesEntities db = new GrandShoesEntities();
        public UsersController()
        {
            db.Configuration.ProxyCreationEnabled = false;
            db.Configuration.LazyLoadingEnabled = false;
        }
        [HttpGet]
        [AllowAnonymous]
        [Route("getDetails")]
        public List<User> GetUsers()
        {
            var users = db.Users.Where(x=>x.IsActive==true).ToList();
            return users;
        }
        // GET: api/Users/5
        [HttpGet]
        [AllowAnonymous]
        [Route("getDetail")]
        [ResponseType(typeof(User))]
        public IHttpActionResult GetUser(int id)
        {
            User user = db.Users.Find(id);
            if (user == null)
            {
                return NotFound();
            }

            return Ok(user);
        }

        // PUT: api/Users/5
        [HttpPost]
        [AllowAnonymous]
        [Route("edit")]
        [ResponseType(typeof(User))]
        public IHttpActionResult PutUser(int id, User user)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            if (id != user.Id)
            {
                return BadRequest();
            }

            if (user.Password != null)
            {
                var salt = CommonFunction.CreateSalt(64);      //Generate a cryptographic random number.  
                var hashAlgorithm = new SHA512HashAlgorithm();
                user.PasswordHash = hashAlgorithm.GenerateSaltedHash(CommonFunction.GetBytes(user.Password), salt);
                user.PasswordSalt = salt;
                db.Entry(user).State = EntityState.Modified;
            }
            else
            {
                
                db.Entry(user).State = EntityState.Modified;
            }

            try
            {
                db.SaveChanges();
                return Ok(user);
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!UserExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

          
        }
        [HttpPost]
        [AllowAnonymous]
        [Route("resetPassword")]
        [ResponseType(typeof(void))]
        public IHttpActionResult PutUserPass(int id,User user)
        {
            var users = db.Users.Find(id);
            var salt = CommonFunction.CreateSalt(64);      //Generate a cryptographic random number.  
            var hashAlgorithm = new SHA512HashAlgorithm();
            users.PasswordHash = hashAlgorithm.GenerateSaltedHash(CommonFunction.GetBytes(user.Password), salt);
            users.PasswordSalt = salt;
            
            db.Entry(users).State = EntityState.Modified;

            try
            {
                db.SaveChanges();
                return Ok(user);

            }
            catch (DbUpdateConcurrencyException)
            {
                if (!UserExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

        }
        [HttpPost]
        [AllowAnonymous]
        [Route("create")]
        [ResponseType(typeof(User))]
        public IHttpActionResult PostUser(User user)
        {
            //var errors = ModelState.Values.SelectMany(v => v.Errors);
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            var salt = CommonFunction.CreateSalt(64);      //Generate a cryptographic random number.  
            var hashAlgorithm = new SHA512HashAlgorithm();
            user.PasswordHash = hashAlgorithm.GenerateSaltedHash(CommonFunction.GetBytes(user.Password), salt);
            user.PasswordSalt = salt;

            db.Users.Add(user);
            try
            {
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return Ok(ex);
            }
            //var user1 = new Model.UserModel();
            //user1.Id = user.Id;
            //user1.FirstName = user.FirstName;
            //user1.LastName = user.LastName;
            //user1.Phone = user.Phone;
            //user1.Email = user.Email;
            // return Ok(user1);
            return CreatedAtRoute("DefaultApi", new { id = user.Id }, User);
        }
        [HttpPost]
        [AllowAnonymous]
        [Route("checkUserPhoneNumber")]
        public bool GetPhoneNumber(User user)
        {
            if (user.Id > 0)
            {
                var phoneNumber = db.Users.Where(x => x.Id == user.Id && x.IsActive == true).FirstOrDefault();
                if (phoneNumber.Phone.Equals(user.Phone))
                {
                    return false;
                }

            }
            var data = db.Users.Any(x => x.Phone == user.Phone && x.IsActive == true);
            return data;
        }
        [HttpPost]
        [AllowAnonymous]
        [Route("checkUserEmail")]
        public bool GetEmail(User user)
        {
            if (user.Id > 0)
            {
                var email = db.Users.Where(x => x.Id == user.Id && x.IsActive == true).FirstOrDefault();
                if (email.Email.Equals(user.Email))
                {
                    return false;
                }

            }
            var data = db.Users.Any(x => x.Email == user.Email && x.IsActive == true);
            return data;
        }
        [HttpPost]
        [AllowAnonymous]
        [Route("Delete")]
        [ResponseType(typeof(User))]
        public IHttpActionResult DeleteUser(int id)
        {
            User user = db.Users.Find(id);
            if (user == null)
            {
                return NotFound();
            }
            user.IsActive = false;
            //db.Units.Remove(unit);
            db.SaveChanges();

            return Ok(user);
        }


        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }

        private bool UserExists(int id)
        {
            throw new NotImplementedException();
        }
     
    }
}
