using Helper;

using Model;
using OfficeOpenXml;
using PagedList;
using POS.Controllers;
using System;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Web;
using System.Web.Mvc;

namespace POS.Areas.Admin.Controllers
{
	[CustomAuth]
	public class ProductController : BaseController
	{
        // GET: Admin/Product
        ServiceClass sc = new ServiceClass();
		public ActionResult Index()
		{
            var pData = TempData["ProcessData"];
            if(pData != null)
            {
                ViewBag.processData = pData;
            }

            var AllProductDetailModelList = Services.ProductService.GetAllProduct();
			return View(AllProductDetailModelList);
		}
		public ActionResult _Index(ProdSearch prodSearch)
		{

			var productModelList = Services.ProductService.SearchProduct(prodSearch);
			return View(productModelList);
		}
		public ActionResult _Index1()
		{
			var ProductList = Services.ProductService.GetFreeGiftList();
			return View(ProductList);
		}
		public ActionResult ViewReceiptByProduct(int? id)
		{
			var ReceiptByProduct = Services.ProductService.ReceiptByProduct(id);
			return View(ReceiptByProduct);
		}
		public ActionResult GetReceiptById(int? id)
		{
			var ReceiptItem = Services.ReceiptOrderService.GetReceiptItemById(id);
			return View(ReceiptItem);
		}
		public ActionResult TreeView(int id)
		{
			List<ViewDistribution> data = new List<ViewDistribution>();
			// var StockSummary = Services.StockDistributionService.GetByProductId(id);
			var StockSummary = Services.StockDistributionSummaryService.GetAllid();
			foreach (var stock in StockSummary)
			{
				ViewDistribution viewDistribution = new ViewDistribution();
				viewDistribution.ID = stock.Id;
				viewDistribution.Name = stock.Id.ToString();
				viewDistribution.Pid = 0;
				// viewDistribution.TransactionDate = stock.DateOpen.ToString();
				data.Add(viewDistribution);
			}

			var StockList = Services.StockDistributionService.GetByProductId(id);
			//var StockList = StockDistribution.Where(x => x.ProductId == id).ToList();
			//var StockListBySummary=StockList.Where(x=>x.StockDistributionSummaryId==data.)
			foreach (var item in data)
			{

				var StockListByParent = StockList.Where(x => x.StockDistributionSummaryId == item.ID).ToList();
				foreach (var item1 in StockListByParent)
				{
					ViewDistribution viewDistribution = new ViewDistribution();
					viewDistribution.ID = item1.BranchId ?? default(int);
					viewDistribution.Name = item1.Branch.Name.ToString();
					viewDistribution.Pid = item1.StockDistributionSummaryId;
					viewDistribution.TransactionDate = item1.DistributionDate.ToString();
					item.Childs.Add(viewDistribution);
				}
			}
			return View(data);
		}
		public ActionResult GetDetail(int? id)
		{
			var StockDistributionByBranch = Services.StockDistributionService.GetByProductId(id);
			return View(StockDistributionByBranch);
		}
		public ActionResult Details(int? id)
		{
			if (id == null)
			{
				return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
			}
			List<BuyerModel> BuyerModelList = Services.BuyerService.GetAll();
			ViewBag.BuyerID = new SelectList(BuyerModelList, "Id", "Name");
			List<SupplierModel> SupplierModelName = Services.SupplierService.GetSupplierName(0);
			ViewBag.SupplierID = new SelectList(SupplierModelName, "Id", "Name");
			List<ColorModel> ColorModelList = Services.ColorService.GetAll();
			List<TemplateModel> TemplateModelList = Services.TemplateService.GetAll();
			List<SupplierModel> SupplierModelList = Services.SupplierService.GetAll();
			List<SizeGridModel> SizeGridModelList = Services.SizeGridService.GetAll();
			// sizeGridModel.Z01 = SizeGridModelList.FirstOrDefault(x => x.Id == 1).Z01;
			List<ProductCategoryModel> ProductCategoryModelList = Services.ProductCategoryService.GetAll();
			List<ProductGrpModel> ProductGroupModelList = Services.ProductGroupService.GetAll();
			List<ProductSourceModel> ProductSourceModel = Services.ProductSourceService.GetAll();
			List<SeasonModel> SeasonModelList = Services.SeasonService.GetAll();
			List<ProductModel> freeGiftList = Services.ProductService.GetFreeGift();
			ViewBag.IsFreeGift = new SelectList(freeGiftList, "Id", "ProductSKU");

			ViewBag.SeasonID = new SelectList(SeasonModelList, "Id", "Description");
			ViewBag.SizeGridID = new SelectList(SizeGridModelList, "Id", "GridNumber");
			ViewBag.ProductCategoryID = new SelectList(ProductCategoryModelList, "Id", "Code");
			ViewBag.ProductGroupID = new SelectList(ProductGroupModelList, "Id", "GroupName");
			ViewBag.ProductSourceID = new SelectList(ProductSourceModel, "Id", "Source");
			ViewBag.SupplierID = new SelectList(SupplierModelList, "Id", "Code");
			ViewBag.DefaultTemplateID = new SelectList(TemplateModelList, "Id", "Name");
			ViewBag.ColorID = new SelectList(ColorModelList, "Id", "Code");
			ViewBag.MarkDownTemplateID = new SelectList(TemplateModelList, "Id", "Name");
			ProductModel ProductModelById = Services.ProductService.GetById(id);
			ProductModelById.SupplierName = ProductModelById.Supplier.Name;
			var productSku = ProductModelById.ProductSKU;
			var markDown = Services.MarkDownService.GetAll();
			var markDownPrev = markDown.Where(x => x.ProductSKU == productSku && x.StyleSKU == ProductModelById.StyleSKU).Count();
			TempData["Number"] = markDownPrev;
			var EffectiveDateLast = markDown.Where(x => x.ProductSKU.ToString() == productSku).LastOrDefault();
			if (EffectiveDateLast == null)
			{
				TempData["Date"] = "01/01/1000";
			}
			else
			{
				TempData["Date"] = EffectiveDateLast.EffectiveDate;
			}
			if (ProductModelById.CreatedOn != null)
			{
				ProductModelById.CreatedOn = ProductModelById.CreatedOn.ToString();
			}
			ViewBag.PrimaryImage = ProductModelById.PrimaryImage;
			if (ProductModelById.Barcode == null)
			{
				ViewBag.Barcode = ProductModelById.StyleSKU + ProductModelById.ProductSKU + ProductModelById.Color.Code;
			}
			else
			{
				ViewBag.Barcode = ProductModelById.Barcode;
			}
			//  ViewBag.slectedItems = ProductModelById.ProductVariances.Select(c => c.ColorID).ToList();

			return View(ProductModelById);
		}
		[HttpGet]
		public JsonResult GenerateStyle(string id)
		{
			var product = Services.ProductService.GetListByProductSKU(id);

			var styleSKU = "0000";
			if (product.Count == 0)
			{
				styleSKU = "0001";
			}
			else
			{
				// string formattedIncNumber = String.Format("{0:D4}", product);
				//product+1;
				int style = Convert.ToInt32(product.LastOrDefault().StyleSKU) + 1;

				int cnt = style.ToString().Length;
				if (cnt == 1)
				{
					styleSKU = "000" + style.ToString();
				}
				if (cnt == 2)
				{
					styleSKU = "00" + style.ToString();
				}
				if (cnt == 3)
				{
					styleSKU = "0" + style.ToString();
				}
				if (cnt == 4)
				{
					styleSKU = style.ToString();
				}
			}
			return Json(styleSKU, JsonRequestBehavior.AllowGet);
		}
		[HttpGet]
		public JsonResult Validation(string id)
		{
			bool status = Services.ProductService.CheckValidation(id);
			return Json(status, JsonRequestBehavior.AllowGet);
		}
		public ActionResult Create()
		{
			ProductModel productModel = new ProductModel();
			// productModel.StyleSKU = Helper.RandomNumberGenerator.RandomStyleSKUGeneration();
			List<ColorModel> ColorModelList = Services.ColorService.GetAll();
			List<TemplateModel> TemplateModelList = Services.TemplateService.GetAll();
			List<SupplierModel> SupplierModelList = Services.SupplierService.GetAll();
			List<SizeGridModel> SizeGridModelList = Services.SizeGridService.GetAll();

			List<ProductCategoryModel> ProductCategoryModelList = Services.ProductCategoryService.GetAll();
			List<ProductGrpModel> ProductGroupModelList = Services.ProductGroupService.GetAll();
			List<ProductSourceModel> ProductSourceModelList = Services.ProductSourceService.GetAll();
			List<BuyerModel> BuyerModelList = Services.BuyerService.GetAll();
			List<SeasonModel> SeasonModelList = Services.SeasonService.GetAll();
			List<ProductStyleModel> ProductStyleModelList = Services.ProductStyleService.GetAll();
			List<ProductModel> freeGiftList = Services.ProductService.GetFreeGift();
			ViewBag.IsFreeGift = new SelectList(freeGiftList, "Id", "ProductSKU");
			ViewBag.ProductStyleId = new SelectList(ProductStyleModelList, "Id", "StyleSKU");

			ViewBag.SeasonID = new SelectList(SeasonModelList, "Id", "Description");
			//sizeGridModel.Z01 = SizeGridModelList.FirstOrDefault(x => x.Id == 1).Z01;
			ViewBag.BuyerID = new SelectList(BuyerModelList, "Id", "Name");
			ViewBag.SizeGridID = new SelectList(SizeGridModelList, "Id", "GridNumber");
			ViewBag.ProductCategoryID = new SelectList(ProductCategoryModelList, "Id", "Code");
			ViewBag.DefaultTemplateID = new SelectList(TemplateModelList, "Id", "Name");
			ViewBag.ProductGroupID = new SelectList(ProductGroupModelList, "Id", "GroupName");
			ViewBag.ProductSourceID = new SelectList(ProductSourceModelList, "Id", "Source");
			ViewBag.SupplierID = new SelectList(SupplierModelList, "Id", "Code");
			// ViewBag.SupplierID = new SelectList(SupplierModelList, "Id", "Name");
			ViewBag.ColorID = new SelectList(ColorModelList, "Id", "Code");
			ViewBag.MarkDownTemplateID = new SelectList(TemplateModelList, "Id", "Name");

			return PartialView();
		}
		[HttpPost]
		public ActionResult Create(ProductModel product, HttpPostedFileBase PrimaryImage, HttpPostedFileBase Image1, HttpPostedFileBase Image2, HttpPostedFileBase Image3, HttpPostedFileBase Image4)
		{
			List<ColorModel> ColorModelList = Services.ColorService.GetAll();
			var colorCode = ColorModelList.Where(x => x.Id == product.ColorID).FirstOrDefault().Code;

			var stylesku = product.StyleSKU;
			var sku = product.ProductSKU;
			product.Barcode = stylesku + sku + colorCode;
			var errors = ModelState.Values.SelectMany(v => v.Errors);
			if (ModelState.IsValid)
			{
				if (PrimaryImage != null || Image1 != null || Image2 != null || Image3 != null || Image4 != null)
				{
					var allowedExtensions = new[] { ".jfif", ".Jpg", ".png", ".jpg", ".jpeg" };
					if (PrimaryImage != null)
					{
						product.PrimaryImage = PrimaryImage.ToString();
						var fileName = Path.GetFileName(PrimaryImage.FileName);
						var ext = Path.GetExtension(PrimaryImage.FileName);
						if (allowedExtensions.Contains(ext))
						{
							string name1 = Path.GetFileNameWithoutExtension(fileName); //getting file name without extension  
							string myfile1 = name1 + "_" + product.Id + ext; //appending the name with id  
																			 // store the file inside ~/project folder(Img) 
							var path = Path.Combine(Server.MapPath("~/Image/product"), myfile1);

							var path1 = myfile1;
							product.PrimaryImage = path1;

							PrimaryImage.SaveAs(path);
						}
					}

					if (Image1 != null)
					{
						product.Image1 = Image1.ToString();
						var fileName1 = Path.GetFileName(Image1.FileName);

						var ext1 = Path.GetExtension(Image1.FileName);
						if (allowedExtensions.Contains(ext1))
						{
							string name2 = Path.GetFileNameWithoutExtension(fileName1); //getting file name without extension  
							string myfile2 = name2 + "_" + product.Id + ext1; //appending the name with ~/project folder(Img) 
							var path = Path.Combine(Server.MapPath("~/Image/product"), myfile2);
							var path2 = myfile2;
							product.Image1 = path2;

							Image1.SaveAs(path);
						}
					}
					if (Image2 != null)
					{
						product.Image2 = Image2.ToString();
						var fileName2 = Path.GetFileName(Image2.FileName);
						var ext2 = Path.GetExtension(Image2.FileName);
						if (allowedExtensions.Contains(ext2))
						{
							string name3 = Path.GetFileNameWithoutExtension(fileName2); //getting file name without extension  
							string myfile3 = name3 + "_" + product.Id + ext2; //appending the name with id                                                                              // store the file inside ~/project folder(Img) 
							var path = Path.Combine(Server.MapPath("~/Image/product"), myfile3);
							var path3 = myfile3;
							product.Image2 = path3;

							Image2.SaveAs(path);
						}
					}
					if (Image3 != null)
					{
						product.Image3 = Image3.ToString();
						var fileName3 = Path.GetFileName(Image3.FileName);
						var ext3 = Path.GetExtension(Image3.FileName);

						if (allowedExtensions.Contains(ext3))
						{
							string name4 = Path.GetFileNameWithoutExtension(fileName3); //getting file name without extension  
							string myfile4 = name4 + "_" + product.Id + ext3; //appending the name with id  
																			  // store the file inside ~/project folder(Img) 
							var path = Path.Combine(Server.MapPath("~/Image/product"), myfile4);

							var path4 = myfile4;
							product.Image3 = path4;

							Image3.SaveAs(path);
						}
					}
					if (Image4 != null)
					{
						product.Image4 = Image4.ToString();
						var fileName4 = Path.GetFileName(Image4.FileName);
						var ext4 = Path.GetExtension(Image4.FileName);

						if (allowedExtensions.Contains(ext4))
						{
							string name5 = Path.GetFileNameWithoutExtension(fileName4); //getting file name without extension  
							string myfile5 = name5 + "_" + product.Id + ext4; //appending the name with id  
																			  // store the file inside ~/project folder(Img) 
							var path = Path.Combine(Server.MapPath("~/Image/product"), myfile5);

							var path5 = myfile5;
							product.Image4 = path5;

							Image4.SaveAs(path);
						}
					}
				}

				product.IsActive = true;

				var ProductCreate = Services.ProductService.Create(product);
				TempData["Success"] = "Data Saved Successfully!";
				return RedirectToAction("Index", "Product/Index");

			}
			else
			{
				var errors1 = ModelState.Select(x => x.Value.Errors)
									   .Where(y => y.Count > 0)
									  .ToList();
			}
			return View();
		}
		public ActionResult ExcelUpload()
		{
			return View();
		}
		[HttpPost]
		public ActionResult ExcelUpload(HttpPostedFileBase ExcelFile)
		{
            Dictionary<string, string> process = new Dictionary<string, string>();
			var msgList = new List<Message>();
			Dictionary<int,ProductModel> products = new Dictionary<int,ProductModel>();
            Dictionary<int,ProductModel> updateProducts = new Dictionary<int,ProductModel>();
			string filePath = string.Empty;
			if (ExcelFile != null)
			{
				string path = Server.MapPath("~/File/");
				if (!Directory.Exists(path))
				{
					Directory.CreateDirectory(path);
				}
				filePath = path + Path.GetFileName(ExcelFile.FileName);
				string extension = Path.GetExtension(ExcelFile.FileName);
				ExcelFile.SaveAs(filePath);

				//Read the contents of CSV file.
				string csvData = System.IO.File.ReadAllText(filePath);
				var csv = csvData.Split('\n').Length;
				var msg = new Message();
                int i = 0;
				foreach (string row in csvData.Split('\n'))
				{
                    
				try
                { 
					if (!string.IsNullOrEmpty(row) && row.Split(',')[0].All(char.IsDigit) && !row.StartsWith(",,,,,"))
					{
                            i++;
                            var model = new ProductModel();
                            
                            model.ProductSKU = row.Split(',')[0];
						model.StyleSKU = row.Split(',')[1];
                            if (model.StyleSKU.Length < 4)
                            {
                                var s = model.StyleSKU.Length;
                                while (s < 4)
                                {
                                    model.StyleSKU = "0" + model.StyleSKU;
                                    s++;
                                }

                            }
                            process.Add(i + "#" + row.Split(',')[0] + "#" + model.StyleSKU, "");
                            model.LongDescription = row.Split(',')[2];
						model.ShortDescription = row.Split(',')[3];
						var SizeGridNo = row.Split(',')[4];

						model.SizeGridID = Services.SizeGridService.GetSizeGridId(SizeGridNo).Id;

						model.RecommendedSellingPrice = row.Split(',')[5];
						model.ActualSellingPrice = row.Split(',')[6];
						model.IsVPI = row.Split(',')[7].Equals("1") ? true : false;
						model.IsMarkDown = row.Split(',')[8].Equals("1") ? true : false;
						var SeasonCode = row.Split(',')[9];
						model.SeasonID = Services.SeasonService.GetSeasonId(SeasonCode).Id;
						var year = row.Split(',')[10];
						model.YearID = Services.ProductService.GetYearId(year).Id;
						var CatagoryCode = row.Split(',')[11];
						model.ProductCategoryID = Services.ProductCategoryService.GetCatogoryCodeId(CatagoryCode).Id;

						var productGroup = row.Split(',')[12];
						model.ProductGroupID = Services.ProductGroupService.GetProductGroupId(productGroup).Id;

					var productSource = row.Split(',')[13];
					model.ProductSourceID = Services.ProductSourceService.GetProductSourceId(productSource).Id;

						model.SupplierStyle = row.Split(',')[14];
					var supplier = row.Split(',')[15];
					model.SupplierID = Services.SupplierService.GetSupplierId(supplier).Id;

						var buyer = row.Split(',')[16];

						model.BuyerID = Services.BuyerService.GetBuyerId(buyer).Id;

						model.CostPriceUSD = row.Split(',')[17];
						model.CostPrice = row.Split(',')[18];
						model.IsAllowZero = row.Split(',')[19].Equals("1") ? true : false; 
						var template = row.Split(',')[20];

						model.DefaultTemplateID = Services.TemplateService.GetTemplateId(template).Id;

						var markdown = row.Split(',')[21];

						model.MarkDownTemplateID = Services.TemplateService.GetTemplateId(markdown).Id;

						model.IsFreeGift = row.Split(',')[22];
						model.IsConsignment = row.Split(',')[23].Equals("1") ? true : false; 
						model.IsDiscontinue = row.Split(',')[24].Equals("1") ? true : false; 
						model.CreatedOn = row.Split(',')[25];
						model.UpdatedOn = row.Split(',')[26];
							
								var count = row.Split(',').Length;
						for (int j = 27; j < count - 1; j++)
						{
						    model.AvailableSize += row.Split(',')[j] + ",";
						}
						model.AvailableSize = model.AvailableSize.Remove(0, 1);
						model.AvailableSize = model.AvailableSize.Remove(model.AvailableSize.Length - 2, 1);

						////model.AvailableSize = model.AvailableSize.Remove('"',null);
						var color = row.Split(',')[count - 1];

						model.ColorID = Services.ColorService.GetColorId(color).Id;

							model.Barcode = model.StyleSKU + model.ProductSKU + color;
							model.Barcode = model.Barcode.Replace("\r", "");
						model.IsActive = true;
						string chk1 = row.Split(',')[0];
                            
                            string chk2 = model.StyleSKU;

                            if (model.ProductSKU.Length == 3 && model.StyleSKU.Length == 4)
							{
								bool isexists = Services.ProductService.CheckProductSKU(chk1, chk2);

								if (!isexists)
								{
									products.Add(i,model);
                                    process[i + "#" + row.Split(',')[0] + "#" + model.StyleSKU] = "Add";
								}
								else
								{
                                    //TempData["Success"] = "h";
                                    updateProducts.Add(i,model);
                                    process[i + "#" + row.Split(',')[0] + "#" + model.StyleSKU] = "Update";
								}
							}else
							{
                                process[i + "#" + row.Split(',')[0] + "#" + model.StyleSKU] = "Check the ProductSKU Length";
                            }
					}
				}
                catch (Exception ex)
				{
                        if(ex.Message != null)
                        {
                            process[i + "#" + row.Split(',')[0] + "#" + row.Split(',')[1]] = ex.Message;
                        }
                        else
                        {
                            process[i + "#" + row.Split(',')[0] + "#" + row.Split(',')[1]] = "Error Adding the row";
                        }
				}
			}
			}
			var addList = Services.ProductService.CreateList(products);
			var updateList = Services.ProductService.UpdateList(updateProducts);

            var dictionaryFrom = new Dictionary<string,string>();

            dictionaryFrom = sc.getFilterData(addList,updateList,process);

            //if (addList != null && updateList != null)
            //process.Where(x => !updateList.Keys.Contains(x.Key) && !addList.Keys.Contains(x.Key)).ToList().ForEach(x => dictionaryFrom.Add(x.Key, x.Value));
            //addList.ToList().ForEach(x => dictionaryFrom.Add(x.Key, x.Value));
            //updateList.ToList().ForEach(x => dictionaryFrom.Add(x.Key, x.Value));
            TempData["ProcessData"] = dictionaryFrom;
            TempData["Success"] = "Data Uploaded Successfully!";
			return RedirectToAction("Index", "Product/Index");
		}

		public ActionResult ExportList()
		{
			var data = Services.ProductService.GetAll();
			ExcelPackage excel = new ExcelPackage();
			var workSheet = excel.Workbook.Worksheets.Add("Sheet1");
			workSheet.Cells[1, 2].LoadFromCollection(data, true);
			using (var memoryStream = new MemoryStream())
			{
				Response.ContentType = "application/vnd.ms-excel";
				Response.AddHeader("content-disposition", "attachment;  filename=ProductExport.xlsx");
				excel.SaveAs(memoryStream);
				memoryStream.WriteTo(Response.OutputStream);
				Response.Flush();
				//Response.End();
			}
			return View();
		}
		public ActionResult Delete(int? id)
		{
			if (id == null)
			{
				return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
			}
			var ProductModelById = Services.ProductService.GetById(id);
			if (ProductModelById == null)
			{
				return HttpNotFound();
			}
			return View(ProductModelById);
		}
		[HttpPost, ActionName("Delete")]
		public ActionResult DeleteConfirmed(ProductModel product)
		{
			if (product.Id > 0)
			{
				var ProductDelete = Services.ProductService.Delete(product);
				TempData["Success"] = "Data Deleted Successfully!";
				return RedirectToAction("Index", "Product/Index");
			}
			return View(product);
		}
		public ActionResult Edit(int? id)

		{
			if (id == null)
			{
				return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
			}

			List<ColorModel> ColorModelList = Services.ColorService.GetAll();
			List<TemplateModel> TemplateModelList = Services.TemplateService.GetAll();
			List<SupplierModel> SupplierModelList = Services.SupplierService.GetAll();
			List<SizeGridModel> SizeGridModelList = Services.SizeGridService.GetAll();
			List<ProductCategoryModel> ProductCategoryModelList = Services.ProductCategoryService.GetAll();
			List<ProductGrpModel> ProductGroupModelList = Services.ProductGroupService.GetAll();
			List<ProductSourceModel> ProductSourceModel = Services.ProductSourceService.GetAll();
			List<SeasonModel> SeasonModelList = Services.SeasonService.GetAll();
			List<BuyerModel> BuyerModelList = Services.BuyerService.GetAll();
			List<ProductStyleModel> ProductStyleModelList = Services.ProductStyleService.GetAll();
			List<ProductModel> freeGiftList = Services.ProductService.GetFreeGift();
			ViewBag.IsFreeGift = new SelectList(freeGiftList, "Id", "ProductSKU");

			ViewBag.ProductStyleId = new SelectList(ProductStyleModelList, "Id", "StyleSKU");

			ViewBag.BuyerID = new SelectList(BuyerModelList, "Id", "Name");
			ViewBag.SeasonID = new SelectList(SeasonModelList, "Id", "Description");
			ViewBag.SizeGridID = new SelectList(SizeGridModelList, "Id", "GridNumber");
			// sizeGridModel.Z01 = SizeGridModelList.FirstOrDefault(x => x.Id == 1).Z01;
			ViewBag.ProductCategoryID = new SelectList(ProductCategoryModelList, "Id", "Code");
			ViewBag.ProductGroupID = new SelectList(ProductGroupModelList, "Id", "GroupName");
			ViewBag.ProductSourceID = new SelectList(ProductSourceModel, "Id", "Source");
			ViewBag.SupplierID = new SelectList(SupplierModelList, "Id", "Code");
			//ViewBag.SupplierID = new SelectList(SupplierModelList, "Id", "Name");
			//  List<SupplierModel> SupplierModelName = Services.SupplierService.GetSupplierName(0);
			//  ViewBag.SupplierID = new SelectList(SupplierModelName, "Id", "Name");
			ViewBag.ColorID = new SelectList(ColorModelList, "Id", "Code");
			ViewBag.MarkDownTemplateID = new SelectList(TemplateModelList, "Id", "Name");
			ViewBag.DefaultTemplateID = new SelectList(TemplateModelList, "Id", "Name");
			ProductModel ProductModelById = Services.ProductService.GetById(id);
			var productSku = ProductModelById.ProductSKU;
			ProductModelById.SupplierName = ProductModelById.Supplier.Name;
			var markDown = Services.MarkDownService.GetAll();
			var markDownPrev = markDown.Where(x => x.ProductSKU == productSku && x.StyleSKU == ProductModelById.StyleSKU).Count();
			TempData["Number"] = markDownPrev;
			var EffectiveDateLast = markDown.Where(x => x.ProductSKU.ToString() == productSku).LastOrDefault();
			if (EffectiveDateLast == null)
			{
				TempData["Date"] = "01/01/1000";
			}
			else
			{
				TempData["Date"] = EffectiveDateLast.EffectiveDate;
			}
			ViewBag.PrimaryImage = ProductModelById.PrimaryImage;
			ProductModelById.CreatedOn = ProductModelById.CreatedOn.ToString();
			if (ProductModelById.Barcode == null)
			{
				ViewBag.Barcode = ProductModelById.StyleSKU + ProductModelById.ProductSKU + ProductModelById.Color.Code;
			}
			else
			{
				ViewBag.Barcode = ProductModelById.Barcode;
			}

			// ViewBag.slectedItems = ProductModelById.ProductVariances.Select(c => c.ColorID).ToList();
			return View(ProductModelById);
		}

		[HttpPost]
		public ActionResult Edit(ProductModel product, HttpPostedFileBase PrimaryImage, HttpPostedFileBase Image1, HttpPostedFileBase Image2, HttpPostedFileBase Image3, HttpPostedFileBase Image4)
		{
			product.IsActive = true;
			var errors = ModelState.Values.SelectMany(v => v.Errors);
			ModelState.Remove("PrimaryImage");
			//if (!ModelState.IsValid)
			//{
			if (PrimaryImage != null || Image1 != null || Image2 != null || Image3 != null || Image4 != null)
			{
				var allowedExtensions = new[] { ".jfif", ".Jpg", ".png", ".jpg", ".jpeg", ".PNG" };
				if (PrimaryImage != null)
				{
					product.PrimaryImage = PrimaryImage.ToString();
					var fileName = Path.GetFileName(PrimaryImage.FileName);
					var ext = Path.GetExtension(PrimaryImage.FileName);
					if (allowedExtensions.Contains(ext))
					{
						string name1 = Path.GetFileNameWithoutExtension(fileName); //getting file name without extension  
						string myfile1 = name1 + "_" + product.Id + ext; //appending the name with id  
																		 // store the file inside ~/project folder(Img) 
						var path = Path.Combine(Server.MapPath("~/Image/product"), myfile1);

						var path1 = myfile1;
						product.PrimaryImage = path1;

						PrimaryImage.SaveAs(path);
					}
				}

				if (Image1 != null)
				{
					product.Image1 = Image1.ToString();
					var fileName1 = Path.GetFileName(Image1.FileName);

					var ext1 = Path.GetExtension(Image1.FileName);
					if (allowedExtensions.Contains(ext1))
					{
						string name2 = Path.GetFileNameWithoutExtension(fileName1); //getting file name without extension  
						string myfile2 = name2 + "_" + product.Id + ext1; //appending the name with id                                                                               // store the file inside ~/project folder(Img) 
						var path = Path.Combine(Server.MapPath("~/Image/product"), myfile2);
						var path2 = myfile2;
						product.Image1 = path2;

						Image1.SaveAs(path);
					}
				}
				if (Image2 != null)
				{
					product.Image2 = Image2.ToString();
					var fileName2 = Path.GetFileName(Image2.FileName);
					var ext2 = Path.GetExtension(Image2.FileName);
					if (allowedExtensions.Contains(ext2))
					{
						string name3 = Path.GetFileNameWithoutExtension(fileName2); //getting file name without extension  
						string myfile3 = name3 + "_" + product.Id + ext2; //appending the name with id                                                                              // store the file inside ~/project folder(Img) 
						var path = Path.Combine(Server.MapPath("~/Image/product"), myfile3);
						var path3 = myfile3;
						product.Image2 = path3;

						Image2.SaveAs(path);
					}
				}
				if (Image3 != null)
				{
					product.Image3 = Image3.ToString();
					var fileName3 = Path.GetFileName(Image3.FileName);
					var ext3 = Path.GetExtension(Image3.FileName);

					if (allowedExtensions.Contains(ext3))
					{
						string name4 = Path.GetFileNameWithoutExtension(fileName3); //getting file name without extension  
						string myfile4 = name4 + "_" + product.Id + ext3; //appending the name with id  
																		  // store the file inside ~/project folder(Img) 
						var path = Path.Combine(Server.MapPath("~/Image/product"), myfile4);

						var path4 = myfile4;
						product.Image3 = path4;

						Image3.SaveAs(path);
					}
				}
				if (Image4 != null)
				{
					product.Image4 = Image4.ToString();
					var fileName4 = Path.GetFileName(Image4.FileName);
					var ext4 = Path.GetExtension(Image4.FileName);

					if (allowedExtensions.Contains(ext4))
					{
						string name5 = Path.GetFileNameWithoutExtension(fileName4); //getting file name without extension  
						string myfile5 = name5 + "_" + product.Id + ext4; //appending the name with id  
																		  // store the file inside ~/project folder(Img) 
						var path = Path.Combine(Server.MapPath("~/Image/product"), myfile5);

						var path5 = myfile5;
						product.Image4 = path5;

						Image4.SaveAs(path);
					}
				}
			}
			List<ColorModel> ColorModelList = Services.ColorService.GetAll();
			List<TemplateModel> TemplateModelList = Services.TemplateService.GetAll();
			List<SupplierModel> SupplierModelList = Services.SupplierService.GetAll();
			List<SizeGridModel> SizeGridModelList = Services.SizeGridService.GetAll();
			List<ProductCategoryModel> ProductCategoryModelList = Services.ProductCategoryService.GetAll();
			List<ProductGrpModel> ProductGroupModelList = Services.ProductGroupService.GetAll();
			List<ProductSourceModel> ProductSourceModel = Services.ProductSourceService.GetAll();
			List<SeasonModel> SeasonModelList = Services.SeasonService.GetAll();
			List<BuyerModel> BuyerModelList = Services.BuyerService.GetAll();
			ViewBag.BuyerID = new SelectList(BuyerModelList, "Id", "Name");
			ViewBag.SeasonID = new SelectList(SeasonModelList, "Id", "Description");
			ViewBag.SizeGridID = new SelectList(SizeGridModelList, "Id", "GridNumber");
			ViewBag.SizeGridID = new SelectList(SizeGridModelList, "Id", "");

			ViewBag.ProductCategoryID = new SelectList(ProductCategoryModelList, "Id", "Code");
			ViewBag.ProductGroupID = new SelectList(ProductGroupModelList, "Id", "GroupName");
			ViewBag.ProductSourceID = new SelectList(ProductSourceModel, "Id", "Source");
			ViewBag.SupplierID = new SelectList(SupplierModelList, "Id", "Code");
			// List<SupplierModel> SupplierModelName = Services.SupplierService.GetSupplierName(0);
			// ViewBag.SupplierID = new SelectList(SupplierModelName, "Id", "Name");
			ViewBag.ColorID = new SelectList(ColorModelList, "Id", "Code");
			ViewBag.MarkDownTemplateID = new SelectList(TemplateModelList, "Id", "Name");

			bool ProductEdit = Services.ProductService.Edit(product);
			TempData["Success"] = "Data Saved Successfully!";
			return RedirectToAction("Index", "Product/Index");
		}
		public ActionResult getSeasonDescription(int? id)
		{
			// ProductModel ProductModelById = Services.ProductService.GetById(id);
			List<SeasonModel> SeasonModelDescription = Services.SeasonService.GetSeasonDescription(id);
			ViewBag.SeasonID = new SelectList(SeasonModelDescription, "Id", "Description");
			return View();
		}

		public ActionResult getSupplierName(int? id)
		{
			// ProductModel ProductModelById = Services.ProductService.GetById(id);
			List<SupplierModel> SupplierModelName = Services.SupplierService.GetSupplierName(id);
			ViewBag.SupplierID = new SelectList(SupplierModelName, "Id", "Name");
			return View();
		}
		[HttpGet]
		public JsonResult AutoCompleteStyleSKUList(string name)
		{
			var ColorLists = Services.ProductStyleService.ProductStyleAutocomplete(name);
			return Json(ColorLists, JsonRequestBehavior.AllowGet);
		}
		[HttpGet]
		public JsonResult AutoCompleteProductSKUList(string name)
		{
			var ProductSKUList = Services.ProductService.ProductAutocomplete(name);
			return Json(ProductSKUList, JsonRequestBehavior.AllowGet);
		}
		public ActionResult CheckProductSKU(ProductModel model)
		{
			var iExist = Services.ProductService.CheckProductSKU(model);
			return Json(!iExist, JsonRequestBehavior.AllowGet);
		}
		[HttpGet]
		public JsonResult getGridSize(int? id)
		{
			//ProductModel ProductModelById = Services.ProductService.GetById(id);
			SizeGridModel SizeGridModelById = Services.SizeGridService.GetById(id);
			List<string> namelist = new List<string>();
			if (!string.IsNullOrEmpty(SizeGridModelById.Z01.ToString()))
			{
				namelist.Add(SizeGridModelById.Z01.ToString());
			}
			if (!string.IsNullOrEmpty(SizeGridModelById.Z02.ToString()))
			{
				namelist.Add(SizeGridModelById.Z02.ToString());
			}
			if (!string.IsNullOrEmpty(SizeGridModelById.Z03.ToString()))
			{
				namelist.Add(SizeGridModelById.Z03.ToString());
			}
			if (!string.IsNullOrEmpty(SizeGridModelById.Z04.ToString()))
			{
				namelist.Add(SizeGridModelById.Z04.ToString());
			}
			if (!string.IsNullOrEmpty(SizeGridModelById.Z05.ToString()))
			{
				namelist.Add(SizeGridModelById.Z05.ToString());
			}
			if (!string.IsNullOrEmpty(SizeGridModelById.Z06.ToString()))
			{
				namelist.Add(SizeGridModelById.Z06.ToString());
			}
			if (!string.IsNullOrEmpty(SizeGridModelById.Z07.ToString()))
			{
				namelist.Add(SizeGridModelById.Z07.ToString());
			}
			if (!string.IsNullOrEmpty(SizeGridModelById.Z08.ToString()))
			{
				namelist.Add(SizeGridModelById.Z08.ToString());
			}
			if (!string.IsNullOrEmpty(SizeGridModelById.Z09.ToString()))
			{
				namelist.Add(SizeGridModelById.Z09.ToString());
			}
			if (!string.IsNullOrEmpty(SizeGridModelById.Z10.ToString()))
			{
				namelist.Add(SizeGridModelById.Z10.ToString());

			}
			if (!string.IsNullOrEmpty(SizeGridModelById.Z11.ToString()))
			{
				namelist.Add(SizeGridModelById.Z11.ToString());
			}
			if (!string.IsNullOrEmpty(SizeGridModelById.Z12.ToString()))
			{
				namelist.Add(SizeGridModelById.Z12.ToString());
			}
			if (!string.IsNullOrEmpty(SizeGridModelById.Z13.ToString()))
			{
				namelist.Add(SizeGridModelById.Z13.ToString());
			}
			if (!string.IsNullOrEmpty(SizeGridModelById.Z14.ToString()))
			{
				namelist.Add(SizeGridModelById.Z14.ToString());
			}
			if (!string.IsNullOrEmpty(SizeGridModelById.Z15.ToString()))
			{
				namelist.Add(SizeGridModelById.Z15.ToString());
			}
			if (!string.IsNullOrEmpty(SizeGridModelById.Z16.ToString()))
			{
				namelist.Add(SizeGridModelById.Z16.ToString());
			}
			if (!string.IsNullOrEmpty(SizeGridModelById.Z17.ToString()))
			{
				namelist.Add(SizeGridModelById.Z17.ToString());
			}
			if (!string.IsNullOrEmpty(SizeGridModelById.Z18.ToString()))
			{
				namelist.Add(SizeGridModelById.Z18.ToString());
			}
			if (!string.IsNullOrEmpty(SizeGridModelById.Z19.ToString()))
			{
				namelist.Add(SizeGridModelById.Z19.ToString());
			}
			if (!string.IsNullOrEmpty(SizeGridModelById.Z20.ToString()))
			{
				namelist.Add(SizeGridModelById.Z20.ToString());
			}
			if (!string.IsNullOrEmpty(SizeGridModelById.Z21.ToString()))
			{
				namelist.Add(SizeGridModelById.Z21.ToString());
			}
			if (!string.IsNullOrEmpty(SizeGridModelById.Z22.ToString()))
			{
				namelist.Add(SizeGridModelById.Z22.ToString());

			}
			if (!string.IsNullOrEmpty(SizeGridModelById.Z23.ToString()))
			{
				namelist.Add(SizeGridModelById.Z23.ToString());
			}
			if (!string.IsNullOrEmpty(SizeGridModelById.Z24.ToString()))
			{
				namelist.Add(SizeGridModelById.Z24.ToString());
			}
			if (!string.IsNullOrEmpty(SizeGridModelById.Z25.ToString()))
			{
				namelist.Add(SizeGridModelById.Z25.ToString());
			}
			if (!string.IsNullOrEmpty(SizeGridModelById.Z26.ToString()))
			{
				namelist.Add(SizeGridModelById.Z26.ToString());
			}
			if (!string.IsNullOrEmpty(SizeGridModelById.Z27.ToString()))
			{
				namelist.Add(SizeGridModelById.Z27.ToString());
			}
			if (!string.IsNullOrEmpty(SizeGridModelById.Z28.ToString()))
			{
				namelist.Add(SizeGridModelById.Z28.ToString());
			}
			if (!string.IsNullOrEmpty(SizeGridModelById.Z29.ToString()))
			{
				namelist.Add(SizeGridModelById.Z29.ToString());
			}
			if (!string.IsNullOrEmpty(SizeGridModelById.Z30.ToString()))
			{
				namelist.Add(SizeGridModelById.Z30.ToString());
			}
			return Json(namelist, JsonRequestBehavior.AllowGet);

		}
		[HttpGet]
		public JsonResult AutoCompleteColorList(string name)
		{
			var ColorLists = Services.ColorService.ColoeAutocomplete(name);
			return Json(ColorLists, JsonRequestBehavior.AllowGet);
		}
		[HttpGet]
		public JsonResult AutocompleteSupplierCode(string name)
		{
			return Json(JsonRequestBehavior.AllowGet);
		}
		public ActionResult ShowTemplate(int TemplateId, int ProductId)
		{

			//var model = db.Result<TemplateModel>("api/template/getOne?id=" + TemplateId, "", "GET");
			var model = Services.ProductService.ShowTemplate(TemplateId, ProductId);
			//model.TemplateHtml = ShowTemplate(model, ProductId);

			return View(model);
		}
	}
}