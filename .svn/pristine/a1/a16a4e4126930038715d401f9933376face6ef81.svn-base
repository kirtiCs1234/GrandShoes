using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using System.Web.Http.Description;
using DAL;
using Model;

namespace POSApi.Controllers
{
    [RoutePrefix("api/supplier")]
    public class SuppliersController : ApiController
    {
        private GrandShoesEntities db = new GrandShoesEntities();
        public SuppliersController()
        {
            db.Configuration.LazyLoadingEnabled = false;
            db.Configuration.ProxyCreationEnabled = false;
        }
        // GET: api/Suppliers
        [HttpGet]
        [AllowAnonymous]
        [Route("getDetails")]
        public List<Supplier> GetSuppliers()
        {
            var data= db.Suppliers.Where(x=>x.IsActive==true).ToList();
            return data;
        }

        //Get Supplier for AutoComplete
        [HttpGet]
        [Route("SupplierAutocomplete")]
        public IHttpActionResult SupplierAutocomplete(string name)
        {
            var data = db.Suppliers.Where(x => x.IsActive == true && x.Name.Contains(name)).ToList().Select(m => new SupplierModel {
                Name=m.Name,
                Id=m.Id,
            }).ToList();
            return Ok(data);
        }



        // GET: api/Suppliers/5
        [HttpGet]
        [AllowAnonymous]
        [Route("getDetail")]
        [ResponseType(typeof(Supplier))]
        public IHttpActionResult GetSupplier(int id)
        {
            var supplier = db.Suppliers.Where(x=>x.IsActive==true).ToList();
            if (supplier == null)
            {
                return NotFound();
            }

            return Ok(supplier);
        }
        [HttpGet]
        [AllowAnonymous]
        [Route("getSupplierName")]
        [ResponseType(typeof(Supplier))]
        public IHttpActionResult GetSupplierName(int id)
        {
            var supplier = db.Suppliers.Where(x => x.IsActive == true && x.Id==id).ToList();
            if (supplier == null)
            {
                return NotFound();
            }

            return Ok(supplier);
        }
        // PUT: api/Suppliers/5
        [HttpPost]
        [AllowAnonymous]
        [Route("edit")]
        [ResponseType(typeof(void))]
        public IHttpActionResult PutSupplier(int id, Supplier supplier)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            if (id != supplier.Id)
            {
                return BadRequest();
            }

            db.Entry(supplier).State = EntityState.Modified;

            try
            {
                db.SaveChanges();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!SupplierExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return StatusCode(HttpStatusCode.NoContent);
        }

        // POST: api/Suppliers
        [HttpPost]
        [AllowAnonymous]
        [Route("create")]
        [ResponseType(typeof(Supplier))]
        public IHttpActionResult PostSupplier(Supplier supplier)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            db.Suppliers.Add(supplier);
            db.SaveChanges();

            return CreatedAtRoute("DefaultApi", new { id = supplier.Id }, supplier);
        }

        // DELETE: api/Suppliers/5
        [HttpPost]
        [AllowAnonymous]
        [Route("delete")]
        [ResponseType(typeof(Supplier))]
        public IHttpActionResult DeleteSupplier(int id)
        {
            Supplier supplier = db.Suppliers.Find(id);
            if (supplier == null)
            {
                return NotFound();
            }
            supplier.IsActive = false;
            //db.Suppliers.Remove(supplier);
            db.SaveChanges();

            return Ok(supplier);
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }

        private bool SupplierExists(int id)
        {
            return db.Suppliers.Count(e => e.Id == id) > 0;
        }

    }
}