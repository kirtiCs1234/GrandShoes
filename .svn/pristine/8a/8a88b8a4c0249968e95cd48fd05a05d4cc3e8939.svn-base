using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using System.Web.Http.Description;
using DAL;
using Model;

namespace POSApi.Controllers.Admin
{
    [RoutePrefix("api/product")]
    public class ProductsController : ApiController
    {
        private GrandShoesEntities db = new GrandShoesEntities();
        public ProductsController()
        {
            db.Configuration.LazyLoadingEnabled = false;
            db.Configuration.ProxyCreationEnabled = false;
        }
        // GET: api/Products
        [HttpGet]
        [AllowAnonymous]
        [Route("getDetails")]
        public List<AllProductDetailModel> GetProducts()
        {
            var list = db.Products.Where(x => x.IsActive == true ).Select(x => new AllProductDetailModel
            {
                Id = x.Id,
                ProductSKU = x.ProductSKU,
                ProductStyleSKU = x.ProductStyle.StyleSKU,
                LongDescription = x.LongDescription,
                ShortDescription = x.LongDescription,
                 PrimaryImage=x.PrimaryImage
            }).ToList();

            return list;
        }
        [HttpGet]
        [AllowAnonymous]
        [Route("getDetail")]
        [ResponseType(typeof(DAL.Product))]
        public IHttpActionResult GetProduct(int id)
        {
            var product = db.Products.Find(id);
            if (product == null)
            {
                return NotFound();
            }

            return Ok(product);
        }
        [HttpPost]
        [AllowAnonymous]
        [Route("edit")]
        [ResponseType(typeof(void))]
        public IHttpActionResult PutProduct(int id, DAL.Product product)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            if (id != product.Id)
            {
                return BadRequest();
            }

            db.Entry(product).State = EntityState.Modified;

            try
            {
                db.SaveChanges();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!ProductExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return StatusCode(HttpStatusCode.NoContent);
        }


        [HttpPost]
        [AllowAnonymous]
        [Route("create")]
        [ResponseType(typeof(DAL.Product))]
        public IHttpActionResult PostProduct(DAL.Product product)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            db.Products.Add(product);
            db.SaveChanges();

            return CreatedAtRoute("DefaultApi", new { id = product.Id }, product);
        }


        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }

        private bool ProductExists(int id)
        {
            return db.Products.Count(e => e.Id == id) > 0;
        }

        // get Products for Autocomplete
        [HttpGet]
        [Route("ProductsAutocomplete")]
        public IHttpActionResult ProductsAutocomplete(string name)
        {
            var data = db.Products.Include(s => s.SizeGrid).Where(x => x.IsActive == true && x.ProductSKU.Contains(name)).ToList().Select(m => new Model.Product.Product
            {
                ProductSKU = m.ProductSKU,
                Id = m.Id,
                SupplierStyle=m.SupplierStyle,
                SizeGridID=m.SizeGridID,
                autoCompleteSizeGrid=m.SizeGrid?.GridNumber,
                AvailableSize=m.AvailableSize,
            }).ToList();
            return Ok(data);
        }


    }
}