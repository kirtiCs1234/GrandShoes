using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web;
using System.Web.Http;
using System.Web.Http.Description;
using DAL;
using Model;
using Newtonsoft.Json;
using PagedList;
using static Model.AreaPaginationModel;

namespace POSApi.Controllers
{
    [RoutePrefix("api/area")]
    public class AreasController : ApiController
    {
        private GrandShoesEntities db = new GrandShoesEntities();
        public AreasController()
        {
            db.Configuration.LazyLoadingEnabled = false;
            db.Configuration.ProxyCreationEnabled = false;
        }
        // GET: api/Areas
        [HttpGet]
        [AllowAnonymous]
        [Route("getDetails")]
        public List<Area> GetAreas()

        {
            var data = db.Areas.Where(x => x.IsActive == true).Include(x => x.User).ToList();
            
            // int CurrentPage = areaPaginationModel.pageNumber;
            // int PageSize = areaPaginationModel.pageSize;
            //int TotalCount = areaPaginationModel.totalCount;

            // Calculating Totalpage by Dividing (No of Records / Pagesize)  
            //int TotalPages = (int)Math.Ceiling(count / (double)PageSize);
            // var items = areaPaginationModel.Items;
            // Returns List of Customer after applying Paging   
            //  var items = data.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
            // List<AreaPaginationModel> obj = new List<AreaPaginationModel>();
            // obj = new List<AreaPaginationModel>(new AreaPaginationModel()
            //{

            //   pageSize = PageSize;
            // });
            //  var previousPage = CurrentPage > 1 ? "Yes" : "No";
            //  var nextPage = CurrentPage < TotalPages ? "Yes" : "No";
            return data;
            //return items.ToPagedList(CurrentPage,TotalCount);


          
        }
       
        // GET: api/Areas/5
        [HttpGet]
    [AllowAnonymous]
    [Route("getDetail")]
    [ResponseType(typeof(Area))]
    public IHttpActionResult GetArea(int id)
    {
        Area area = db.Areas.Find(id);
        if (area == null)
        {
            return NotFound();
        }

        return Ok(area);
    }

    // PUT: api/Areas/5
    [HttpPost]
    [AllowAnonymous]
    [Route("edit")]
    [ResponseType(typeof(void))]
    public IHttpActionResult PutArea(int id, Area area)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        if (id != area.Id)
        {
            return BadRequest();
        }

        db.Entry(area).State = EntityState.Modified;

        try
        {
            db.SaveChanges();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!AreaExists(id))
            {
                return NotFound();
            }
            else
            {
                throw;
            }
        }

        return StatusCode(HttpStatusCode.NoContent);
    }

    // POST: api/Areas
    [HttpPost]
    [AllowAnonymous]
    [Route("create")]
    [ResponseType(typeof(Area))]
    public IHttpActionResult PostArea(Area area)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        db.Areas.Add(area);
        db.SaveChanges();

        return CreatedAtRoute("DefaultApi", new { id = area.Id }, area);
    }

    // DELETE: api/Areas/5
    [HttpPost]
    [AllowAnonymous]
    [Route("delete")]
    [ResponseType(typeof(Area))]
    public IHttpActionResult DeleteArea(int id)
    {
        Area area = db.Areas.Find(id);
        if (area == null)
        {
            return NotFound();
        }
        area.IsActive = false;
        //db.Areas.Remove(area);
        db.SaveChanges();

        return Ok(area);
    }

    protected override void Dispose(bool disposing)
    {
        if (disposing)
        {
            db.Dispose();
        }
        base.Dispose(disposing);
    }

    private bool AreaExists(int id)
    {
        return db.Areas.Count(e => e.Id == id) > 0;
    }
}
}