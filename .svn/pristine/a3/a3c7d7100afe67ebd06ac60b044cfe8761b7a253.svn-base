using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using System.Web.Http.Description;
using DAL;
using Model;

namespace POSApi.Controllers.Admin
{
    [RoutePrefix("api/cartonManagement")]
    public class CartonManagementsController : ApiController
    {
        private GrandShoesEntities db = new GrandShoesEntities();
        public CartonManagementsController()
        {
            db.Configuration.LazyLoadingEnabled = false;
            db.Configuration.ProxyCreationEnabled = false;
        }
        [HttpGet]
        [AllowAnonymous]
        [Route("getDetails")]
        // GET: api/CartonManagements
        public List<CartonManagement> GetCartonManagements()
        {
           var list= db.CartonManagements.Where(x=>x.IsActive==true).Include(x=>x.Branch);
            return list.ToList();
        }
        [HttpGet]
        [AllowAnonymous]
        [Route("getDetail")]
        // GET: api/CartonManagements
        public List<CartonManagement> GetCartonManagement(int? SummaryId)
        {
            var list = db.CartonManagements.Where(x => x.IsActive == true && x.CartonNumber != null && x.DistributionSummaryID == SummaryId).Include(x => x.Branch);
            return list.ToList();
        }
        [HttpGet]
        [AllowAnonymous]
        [Route("getAreaPaging")]
        public ServiceResult<List<CartonManagement>> GetArea([FromUri]Paging paging)
        {
            ServiceResult<List<CartonManagement>> model = new ServiceResult<List<CartonManagement>>();
            var source = db.CartonManagements.Where(x => x.IsActive == true && x.TotalItems != null)
                        .Include(x => x.StockDistributionSummary).Include(x=>x.Branch).OrderByDescending(x => x.Id).ToList();
            int count = source.Count();
            // Parameter is passed from Query string if it is null then it default Value will be pageNumber:1  
            int CurrentPage = paging.pageNumber;
            // Parameter is passed from Query string if it is null then it default Value will be pageSize:20  
            int PageSize = paging.pageSize;
            // Display TotalCount to Records to User  
            int TotalCount = count;
            // Calculating Totalpage by Dividing (No of Records / Pagesize)  
            int TotalPages = (int)Math.Ceiling(count / (double)PageSize);
            // Returns List of Customer after applying Paging   
            var items = source.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
            model.TotalCount = count;
            model.data = items;
            model.pageSize = PageSize;
            return model;
        }
        [HttpGet]
        [Route("GetIBTNumber")]
        public List<CartonManagement> GetIBTNumber()
        {
            var carton = db.CartonManagements.ToList();
          
            return carton;
        }
        [HttpGet]
        [Route("DeleteWaste")]
        public IHttpActionResult DeleteAll()
        {
            var list = db.CartonManagements.ToList();
            list.RemoveAll(x => x.IsActive == null && x.TotalItems == null && x.CartonNumber == null);
            return Ok(true);
        }
        [HttpGet]
        [Route("getCartonByBranch")]
        public CartonManagement Data2(string BranchName)
        {
            var data = db.CartonManagements.Where(x => x.IsActive == true && x.Branch.Name == BranchName).Include(x => x.Branch).FirstOrDefault();
            return data;
        }
        [HttpGet]
        [AllowAnonymous]
        [Route("GetByBranch")]
        public List<CartonManagementDetail> Data(string BranchName)
        {
            var list = db.CartonManagements.Where(x => x.IsActive == true && x.Branch.Name == BranchName).Include(x => x.Branch).Include(x => x.CartonManagementDetails.Select(lb => lb.Product)).Include(x => x.StockDistributionSummary).ToList();
            //list = list.Where(x => x.Branch.Name == BranchName).ToList();

            List<CartonManagementDetail> cartonList = new List<CartonManagementDetail>();
            foreach (var a in list)
            {
                 
                var list1 = a.CartonManagementDetails.Where(m => m.IsActive == true && m.CartonManagementID==a.Id).ToList();
                cartonList.AddRange(list1);
            }

            //var list2 = cartonList.GroupBy(a => a.ProductID,a=>a)
            //      .Select(a => new CartonManagementDetail { Z01 = a.Sum(x => x.Z01), Z02 = a.Sum(x => x.Z02), Z03 = a.Sum(x => x.Z03), Z04 = a.Sum(x => x.Z04),
            //       Z05 = a.Sum(x => x.Z05),
            //         Z06 = a.Sum(x => x.Z06),
            //          Z07 = a.Sum(x => x.Z07),
            //          Z08 = a.Sum(x => x.Z08),
            //          Z09 = a.Sum(x => x.Z09),
            //         Z10 = a.Sum(x => x.Z10),
            //         Z11 = a.Sum(x => x.Z11),
            //         Z12 = a.Sum(x => x.Z12),
            //          Z13 = a.Sum(x => x.Z13),
            //         Z14 = a.Sum(x => x.Z14),
            //          Z15 = a.Sum(x => x.Z15),
            //          Z16 = a.Sum(x => x.Z16),
            //          Z17 = a.Sum(x => x.Z17),
            //          Z18 = a.Sum(x => x.Z18),
            //          Z19 = a.Sum(x => x.Z19),
            //         Z20 = a.Sum(x => x.Z20),
            //         Z21 = a.Sum(x => x.Z21),
            //          Z22 = a.Sum(x => x.Z22),
            //          Z23 = a.Sum(x => x.Z23),
            //          Z24 = a.Sum(x => x.Z24),
            //         Z25 = a.Sum(x => x.Z25),
            //         Z26 = a.Sum(x => x.Z26),
            //         Z27 = a.Sum(x => x.Z27),
            //         Z28 = a.Sum(x => x.Z28),
            //         Z29 = a.Sum(x => x.Z29),
            //         Z30 = a.Sum(x => x.Z30),
            //        IsActive = true,
            //         ProductID = a.Select(x => x.ProductID).FirstOrDefault(),
            //        // Product = db.Products.Where(x => x.IsActive == true && x.Id == a.ProductID).FirstOrDefault(),
            //    }).ToList();
            //      //{
            //      //    ProductID = lk.ProductID,
            //      //    Product = db.Products.Where(x => x.Id == lk.ProductID).Include(x=>x.ProductStyle).FirstOrDefault(),

            //      //    Z01 = cartonList.Sum(x=>x.Z01),
            //      //    Z02 = cartonList.Sum(x => x.Z02),
            //      //    Z03 = cartonList.Sum(x => x.Z03),
            //      //    Z04 = cartonList.Sum(x => x.Z04),
            //      //    Z05 = cartonList.Sum(x => x.Z05),
            //      //    Z06 = cartonList.Sum(x => x.Z06),
            //      //    Z07 = cartonList.Sum(x => x.Z07),
            //      //    Z08 = cartonList.Sum(x => x.Z08),
            //      //    Z09 = cartonList.Sum(x => x.Z09),
            //      //    Z10 = cartonList.Sum(x => x.Z10),
            //      //    Z11 = cartonList.Sum(x => x.Z11),
            //      //    Z12 = cartonList.Sum(x => x.Z12),
            //      //    Z13 = cartonList.Sum(x => x.Z13),
            //      //    Z14 = cartonList.Sum(x => x.Z14),
            //      //    Z15 = cartonList.Sum(x => x.Z15),
            //      //    Z16 = cartonList.Sum(x => x.Z16),
            //      //    Z17 = cartonList.Sum(x => x.Z17),
            //      //    Z18 = cartonList.Sum(x => x.Z18),
            //      //    Z19 = cartonList.Sum(x => x.Z19),
            //      //    Z20 = cartonList.Sum(x => x.Z20),
            //      //    Z21 = cartonList.Sum(x => x.Z21),
            //      //    Z22 = cartonList.Sum(x => x.Z22),
            //      //    Z23 = cartonList.Sum(x => x.Z23),
            //      //    Z24 = cartonList.Sum(x => x.Z24),
            //      //    Z25 = cartonList.Sum(x => x.Z25),
            //      //    Z26 = cartonList.Sum(x => x.Z26),
            //      //    Z27 = cartonList.Sum(x => x.Z27),
            //      //    Z28 = cartonList.Sum(x => x.Z28),
            //      //    Z29 = cartonList.Sum(x => x.Z29),
            //      //    Z30 = cartonList.Sum(x => x.Z30),
            //      //    IsActive = true, 
            //         // CartonManagement = db.CartonManagements.Where(x => x.IsActive == true && x.Id == lk.CartonManagementID).FirstOrDefault().DistributionSummaryID;
                      
            //      //})
            //      //.ToList();
            //list2 = list2.ToList();
            return cartonList;
        }
        [HttpPost]
        [Route("GenerateIBT")]
        public IHttpActionResult GenerateIBT(CartonManagementModel model)
        {
            CartonManagement carton = new CartonManagement();
            carton.IBTNumber = model.IBTNumber;
           // carton.IsActive = true;
            carton.BranchID = db.Branches.Where(x=>x.IsActive==true && x.Name==model.BranchName).FirstOrDefault().Id;
            DateTime today = DateTime.Today;
            carton.PackDate = today;
            //carton.CartonNumber = 0;
            carton.DistributionSummaryID = model.DistributionSummaryID;
            db.CartonManagements.Add(carton);
            db.SaveChanges();
            return Ok(true);
        }
        [HttpPost]
        [AllowAnonymous]
        [Route("getSearchData")]
        public ServiceResult<List<CartonManagement>> GetSearchData(CartonManagementModel search)
        {
            var pageSize = 10;

            ServiceResult<List<CartonManagement>> model = new ServiceResult<List<CartonManagement>>();
            var source = db.CartonManagements.Where(x => x.IsActive == true && x.TotalItems!=null).Include(x => x.Branch).Include(x=>x.StockDistributionSummary);
            if (search!= null)
            {
                if (!search.BranchName.All(char.IsNumber))
                    source = source.Where(m => m.Branch.Name.Contains(search.BranchName.ToLower()));
                if (search.DistributionSummaryID > 0)
                    source = source.Where(m => m.DistributionSummaryID == search.DistributionSummaryID);
                //  var items = source.OrderBy(m => m.Id).Skip((areaSearch.Page ?? 1 - 1) * pageSize).Take(pageSize).ToList();
            }
            int count = source.Count();
            var items = source.OrderByDescending(m => m.Id).Skip(((search.Page ?? 1) - 1) * pageSize)
                        .Take(pageSize).ToList();
            model.data = items.Select(x => new CartonManagement
            {
                Id = x.Id,
                DistributionSummaryID = x.DistributionSummaryID,
                TotalItems = x.TotalItems,
                PackDate = x.PackDate,
                BranchID = x.BranchID,
                Branch = x.Branch,
                StockDistributionSummary = x.StockDistributionSummary,
                CartonNumber = x.CartonNumber,
                IBTNumber = x.IBTNumber,
                IsDispatched = x.IsDispatched,
            }).ToList();
            model.TotalCount = count;
            return model;
        }
        [HttpGet]
        [Route("GetData")]
        public List<CartonManagement> List(string BranchName,int? DistributionSummaryID)
        {
            var list = db.CartonManagements.Where(x => x.IsActive == true  && x.DistributionSummaryID == DistributionSummaryID).Include(x => x.Branch).Include(x => x.StockDistributionSummary).ToList();
            list = list.Where(x => x.Branch.Name == BranchName).ToList();
            return list;
        }
        [HttpPost]
        [AllowAnonymous]
        [Route("getSearchDataForReport")]
        public ServiceResult<List<CartonManagement>> GetSearchDataReport(CartonManagementModel search)
        {
            var pageSize = 10;

            ServiceResult<List<CartonManagement>> model = new ServiceResult<List<CartonManagement>>();
            var source = db.CartonManagements.Where(x => x.IsActive == true && x.TotalItems != null).Include(x => x.Branch).Include(x => x.StockDistributionSummary);
            if (search != null)
            {
                 if (search.BranchID>0)
                    source = source.Where(m => m.BranchID==search.BranchID);
                if (search.DistributionSummaryID > 0)
                    source = source.Where(m => m.DistributionSummaryID == search.DistributionSummaryID);
                //  var items = source.OrderBy(m => m.Id).Skip((areaSearch.Page ?? 1 - 1) * pageSize).Take(pageSize).ToList();
            }
            int count = source.Count();
            var items = source.OrderByDescending(m => m.Id).Skip(((search.Page ?? 1) - 1) * pageSize)
                        .Take(pageSize).ToList();
            model.data = items.Select(x => new CartonManagement
            {
                Id = x.Id,
                DistributionSummaryID = x.DistributionSummaryID,
                TotalItems = x.TotalItems,
                PackDate = x.PackDate,
                BranchID = x.BranchID,
                Branch = x.Branch,
                StockDistributionSummary = db.StockDistributionSummaries.Where(m => m.Id == x.DistributionSummaryID).FirstOrDefault(),

            }).ToList();
            model.TotalCount = count;
            return model;
        }
        [HttpGet]
        [Route("getById")]
        // GET: api/CartonManagements/5
        [ResponseType(typeof(CartonManagement))]
        public IHttpActionResult GetCartonManagement(int id)
        {
            CartonManagement cartonManagement = db.CartonManagements.Find(id);
            if (cartonManagement == null)
            {
                return NotFound();
            }

            return Ok(cartonManagement);
        }
        [HttpPost]
        [Route("edit")]
        // PUT: api/CartonManagements/5
        [ResponseType(typeof(void))]
        public IHttpActionResult PutCartonManagement(int id, CartonManagement cartonManagement)
        {
            var data = db.CartonManagements.Where(x => x.IsActive == true && x.Id == id).ToList().FirstOrDefault();
            return Ok(true);
        }
        [HttpPost]
        [AllowAnonymous]
        [Route("create")]
        // POST: api/CartonManagements
        [ResponseType(typeof(CartonManagement))]
        public IHttpActionResult PostCartonManagement(SearchForCarton carton)
        {
            CartonManagement cartonManagement = new CartonManagement();
           // cartonManagement.Id = carton.Id;
           // DateTime dNow = DateTime.Now;
           // cartonManagement.PackDate = dNow;
           // cartonManagement.TotalItems = 24;
            cartonManagement.DistributionSummaryID = carton.StockDistributionSummaryId;
            cartonManagement.BranchID = carton.BranchId;
            cartonManagement.IsActive = true;
            db.CartonManagements.Add(cartonManagement);
            db.SaveChanges();
            return Ok(true);
        }
        [HttpPost]
        [Route("completeCreate")]
        public IHttpActionResult Create(CartonManagement carton)
        {
            var model = db.CartonManagements.ToList().LastOrDefault();
            //var result = carton.CartonManagementDetails.Select(a => new { ProductSKU = a.ProductSKU, ProductStyle = a.StyleSKU }).ToList().FirstOrDefault();
            foreach(var a in carton.CartonManagementDetails)
            {
                
                model.CartonManagementDetails.Add(a);
            }
            //model.CartonManagementDetails = carton.CartonManagementDetails.Select(x => new CartonManagementDetail
            //{
            //    CartonManagementID = model.Id,
            //    ProductID = db.Products.Where(m => m.ProductSKU == result.ProductSKU && m.ProductStyle.StyleSKU == result.ProductStyle).FirstOrDefault().Id,
            //    Z01=x.Z01,
            //    Z02 = x.Z02,
            //    Z03 = x.Z03,
            //    Z04 = x.Z04,
            //    Z05 = x.Z05,
            //    Z06 = x.Z06,
            //    Z07 = x.Z07,
            //    Z08 = x.Z08,
            //    Z09 = x.Z09,
            //    Z10 = x.Z10,
            //    Z11 = x.Z11,
            //    Z12 = x.Z12,
            //    Z13 = x.Z13,
            //    Z14 = x.Z14,
            //    Z15 = x.Z15,
            //    Z16 = x.Z16,
            //    Z17 = x.Z17,
            //    Z18 = x.Z18,
            //    Z19 = x.Z19,
            //    Z20 = x.Z20,
            //    Z21 = x.Z21,
            //    Z22 = x.Z22,
            //    Z23 = x.Z23,
            //    Z24 = x.Z24,
            //    Z25 = x.Z25,
            //    Z26 = x.Z26,
            //    Z27 = x.Z27,
            //    Z28 = x.Z28,
            //    Z29 = x.Z29,
            //    Z30 = x.Z30,
            //   IsActive=true,
               
            //}).ToList();
            model.DistributionSummaryID = carton.DistributionSummaryID;
            model.CartonNumber = carton.CartonNumber;
            model.TotalItems = carton.TotalItems;
            model.IsActive = true;
            db.SaveChanges();
            return Ok(true);
        }
        [HttpPost]
        [AllowAnonymous]
        [Route("AddCartonOrder")]
        [ResponseType(typeof(CartonManagement))]
        public IHttpActionResult PostCartonOrder(int? CartonManagementId)
        {
            var CartonItemById = db.CartonManagementDetails.Where(x => x.CartonManagementID== CartonManagementId).ToList();
            int? TotalItems = 0;

            foreach (var a in CartonItemById)
            {
                TotalItems += (a.Z01??0) + (a.Z02??0)+ (a.Z03??0) + (a.Z04??0)+ (a.Z05??0)+ (a.Z06??0)+ (a.Z07??0)+ (a.Z08??0)+ (a.Z09??0) + (a.Z10??0)+ (a.Z11??0) + (a.Z12??0)+ (a.Z13??0) + (a.Z14??0) + (a.Z15??0)+ (a.Z16??0)+ (a.Z17??0) + (a.Z18??0)+ (a.Z19??0)+ (a.Z20??0)+
                    (a.Z21??0) + (a.Z22??0) + (a.Z23??0)+ (a.Z24??0) + (a.Z25??0)+(a.Z26??0) + (a.Z27??0) + (a.Z28??0)+ (a.Z29??0) + (a.Z30??0);
                    }
            var CartonManagementById = db.CartonManagements.Where(x => x.Id ==CartonManagementId).FirstOrDefault();
            CartonManagementById.TotalItems = TotalItems;
            
            CartonManagementById.IsActive = true;

            db.SaveChanges();
            return Ok(true);
        }
        [HttpPost]
        [Route("delete")]
        // DELETE: api/CartonManagements/5
        [ResponseType(typeof(CartonManagement))]
        public IHttpActionResult DeleteCartonManagement(int id)
        {
            CartonManagement area = db.CartonManagements.Find(id);
            if (area == null)
            {
                return NotFound();
            }
            area.IsActive = false;
            //db.Areas.Remove(area);
            db.SaveChanges();

            return Ok(area);
        }
        [HttpPost]
        [AllowAnonymous]
        [Route("EditCartonManagement")]
        [ResponseType(typeof(CartonManagement))]
        public IHttpActionResult PostReceiveOrder1(int? Id)
        {
            var CartonManagementItemById = db.CartonManagementDetails.Where(x => x.CartonManagementID == Id).ToList();
            int? TotalQuantity = 0;
            
            foreach (var a in CartonManagementItemById)
            {
                TotalQuantity += (a.Z01 ?? 0) + (a.Z02 ?? 0) + (a.Z03 ?? 0) + (a.Z04 ?? 0) + (a.Z05 ?? 0) + (a.Z06 ?? 0) + (a.Z07 ?? 0) + (a.Z08 ?? 0) + (a.Z09 ?? 0) +
                    (a.Z10 ?? 0) + (a.Z11 ?? 0) + (a.Z12 ?? 0) + (a.Z13 ?? 0) + (a.Z14 ?? 0) + (a.Z15 ?? 0) + (a.Z16 ?? 0) + (a.Z17?? 0) + (a.Z18?? 0) + (a.Z19?? 0) + (a.Z20 ?? 0) + (a.Z21 ?? 0) +
                    (a.Z22 ?? 0) + (a.Z23 ?? 0) + (a.Z24?? 0) + (a.Z25 ?? 0) + (a.Z26 ?? 0) + (a.Z27 ?? 0) + (a.Z28 ?? 0) + (a.Z29 ?? 0) + (a.Z30 ?? 0);

                    }
            var CartonManagementById = db.CartonManagements.Where(x => x.Id == Id).FirstOrDefault();
            CartonManagementById.TotalItems = TotalQuantity;
            
             CartonManagementById.IsActive = true;

            db.SaveChanges();
            return Ok(true);
        }
        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }

        private bool CartonManagementExists(int id)
        {
            return db.CartonManagements.Count(e => e.Id == id) > 0;
        }
    }
}