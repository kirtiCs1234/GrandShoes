using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using System.Web.Http.Description;
using DAL;
using Model;

namespace POSApi.Controllers
{
    [RoutePrefix("api/sizeGrid")]
    public class SizeGridsController : ApiController
    {
        private GrandShoesEntities db = new GrandShoesEntities();
        public SizeGridsController()
        {
            db.Configuration.LazyLoadingEnabled = false;
            db.Configuration.ProxyCreationEnabled = false;
        }
        // GET: api/SizeGrids
        [HttpGet]
        [AllowAnonymous]
        [Route("getDetails")]
        public List<SizeGrid> GetSizeGrids()
        {
            var list= db.SizeGrids.Where(x=>x.IsActive==true).ToList();
            return list;
        }

        // GET: api/SizeGrids/5
        [HttpGet]
        [AllowAnonymous]
        [Route("getDetail")]
        [ResponseType(typeof(SizeGrid))]
        public IHttpActionResult GetSizeGrid(int id)
        {
            SizeGrid sizeGrid = db.SizeGrids.Find(id);
            if (sizeGrid == null)
            {
                return NotFound();
            }

            return Ok(sizeGrid);
        }
        [HttpGet]
        [AllowAnonymous]
        [Route("getGridNo")]
        [ResponseType(typeof(SizeGrid))]
        public IQueryable<string> GetGridSizeNo()
        {

            var list = from s in db.SizeGrids.Where(x => x.IsActive == true)
                       select s.GridNumber;
            return list;
        }

        [HttpGet]
        [AllowAnonymous]
        [Route("getGridSize")]
        [ResponseType(typeof(SizeGrid))]
        public IHttpActionResult GetGridSizeNo(int id)
        {
            
            var sizeGrid = db.SizeGrids.Where(x => x.IsActive == true && x.Id == id).ToList();
           
            return Ok(sizeGrid);
        }
        // PUT: api/SizeGrids/5
        [HttpPost]
        [AllowAnonymous]
        [Route("edit")]
        [ResponseType(typeof(void))]
        public IHttpActionResult PutSizeGrid(int id, SizeGrid sizeGrid)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            if (id != sizeGrid.Id)
            {
                return BadRequest();
            }

            db.Entry(sizeGrid).State = EntityState.Modified;

            try
            {
                db.SaveChanges();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!SizeGridExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return StatusCode(HttpStatusCode.NoContent);
        }

        //SizeGrid Auto complete
        [HttpGet]
        [Route("SizeGridAutocomplete")]
        public IHttpActionResult SizeGridAutocomplete(string name)
        {
            var data = db.SizeGrids.Where(x => x.IsActive == true && x.GridNumber.Contains(name)).ToList().Select(m => new Model.SizeGridModel
            {
                GridNumber = m.GridNumber,
                Id = m.Id,
                Z01 = m.Z01,Z02 = m.Z02,Z03 = m.Z03,Z04 = m.Z04,Z05 = m.Z05,Z06 = m.Z06,Z07 = m.Z07,Z08 = m.Z08,Z09 = m.Z09,Z10 = m.Z10,
                Z11 = m.Z01,Z12 = m.Z12,Z13 = m.Z13,Z14 = m.Z14,Z15 = m.Z15,Z16 = m.Z16,Z17 = m.Z17,Z18 = m.Z18,Z19 = m.Z19,Z20 = m.Z20,
                Z21 = m.Z21,
                Z22 = m.Z22,
                Z23 = m.Z23,
                Z24 = m.Z24,
                Z25 = m.Z25,
                Z26 = m.Z26,
                Z27 = m.Z27,
                Z28 = m.Z28,
                Z29 = m.Z29,
                Z30 = m.Z30,
            }).ToList();
            return Ok(data);
        }



        // POST: api/SizeGrids
        [HttpPost]
        [AllowAnonymous]
        [Route("create")]
        [ResponseType(typeof(SizeGrid))]
        public IHttpActionResult PostSizeGrid(SizeGrid sizeGrid)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            db.SizeGrids.Add(sizeGrid);
            db.SaveChanges();

            return CreatedAtRoute("DefaultApi", new { id = sizeGrid.Id }, sizeGrid);
        }

        // DELETE: api/SizeGrids/5
        [HttpPost]
        [AllowAnonymous]
        [Route("Delete")]
        [ResponseType(typeof(SizeGrid))]
        public IHttpActionResult DeleteSizeGrid(int id)
        {
            SizeGrid sizeGrid = db.SizeGrids.Find(id);
            if (sizeGrid == null)
            {
                return NotFound();
            }
            sizeGrid.IsActive =false;
            //db.SizeGrids.Remove(sizeGrid);
            db.SaveChanges();

            return Ok(sizeGrid);
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }

        private bool SizeGridExists(int id)
        {
            return db.SizeGrids.Count(e => e.Id == id) > 0;
        }
    }
}