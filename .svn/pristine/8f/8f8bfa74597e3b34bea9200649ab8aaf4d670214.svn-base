using Helper;
using Model;
using Model.Log;
using POS.Controllers;
using POS.Models;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using System.Web.Mvc;

namespace POS.Areas.Admin.Controllers
{
    [CustomAuth]
    public class LogController : BaseController
    {
        private ApplicationDbContext db = new ApplicationDbContext();
        public ActionResult Index(int? page)
        {
            int TotalCount = 0;
            var pageSize = 10;
            var pageNumber = page ?? 1;
            int CurrentPage = pageNumber;
            var endPage = CurrentPage + 4;
            int PagesToShow = 10;
            ViewBag.PageSize = pageSize;
            var LogModelList = Services.LogService.GetPaging(page, out TotalCount);
            ViewBag.TotalCount = TotalCount;
            var result = Helper.CommonFunction.GetPages(TotalCount, pageSize, CurrentPage, PagesToShow);
            int totalPages = (TotalCount / pageSize) + (TotalCount % pageSize == 0 ? 0 : 1);
            ViewBag.result = result;
            ViewBag.totalPages = totalPages;
            ViewBag.CurrentPage = CurrentPage;
            var pageCount = result.Count();
            ViewBag.pageCount = pageCount;     
            ViewBag.endPage = endPage;
            return View(LogModelList);
          
        }
        public ActionResult _Index1(LogSearch search, int? page)
        {
            int TotalCount = 0;
            var pageSize = 10;
            var pageNumber = page ?? 1;
            int CurrentPage = pageNumber;
            var endPage = CurrentPage + 4;
            int PagesToShow = 10;
            ViewBag.PageSize = pageSize;
            var LogModelList = Services.LogService.GetSearchData(search, page, out TotalCount);
            ViewBag.TotalCount = TotalCount;
            var result = Helper.CommonFunction.GetPages(TotalCount, pageSize, CurrentPage, PagesToShow);
            int totalPages = (TotalCount / pageSize) + (TotalCount % pageSize == 0 ? 0 : 1);
            ViewBag.result = result;
            ViewBag.totalPages = totalPages;
            ViewBag.CurrentPage = CurrentPage;
            var pageCount = result.Count();
            ViewBag.pageCount = pageCount;
            ViewBag.endPage = endPage;
            return View(LogModelList);
           
            
        }
        public ActionResult DetailsLog(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }            
            var getListById = Services.LogService.GetById( id);
            var str = Newtonsoft.Json.JsonConvert.SerializeObject(getListById);
            var s = str.Replace("{","\r\n{<br>");
            s = s.Replace(",", "<br>&nbsp;&nbsp;&nbsp;");
            s = s.Replace("}", "<br>}");
            var str1 = "User Name: " + getListById.User.FullName
                        + "<br>Action: [" + getListById.ActionLog.ActionLogType +
                         "] on Page [" + getListById.Page.page1 +
                         "]<br>Time: [" + getListById.LogDate + "]<br>";
                            //+ s;
             return Content(str1);
            //return View(getListById);
        }
        public ActionResult DownloadDetail(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            var getListById = Services.LogService.GetById(id);
            var str = Newtonsoft.Json.JsonConvert.SerializeObject(getListById);
            var s = str.Replace("{", "{\r\n\t");
            s = s.Replace(",", "\r\n\t");
            s = s.Replace("}", "\r\n     }");
            var str1 = "User Name: " + getListById.User.FullName
                   + "\r\nAction: [" + getListById.ActionLog.ActionLogType
                   + "] on Page [" + getListById.Page.page1
                    + "]\r\nTime: ["
                    + getListById.LogDate
                    + "]\r\n";
                    //+ s;
            var stream = ConvertStreamFromString(str1);
            var downloadFile = new FileStreamResult(stream, "text/plain") { FileDownloadName = "Log Data File.txt" };
            return downloadFile;
        }
        public System.IO.Stream ConvertStreamFromString(string strStream)
        {
            var stream = new MemoryStream();
            var writer = new StreamWriter(stream);
            writer.Write(strStream);
            writer.Flush();
            stream.Position = 0;
            return stream;
       }
   }
}
