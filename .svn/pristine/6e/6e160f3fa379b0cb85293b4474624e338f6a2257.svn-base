using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using System.Web.Http.Description;
using DAL;
using Model;
using PagedList;
using System.Text.RegularExpressions;
using Helper.ExtensionMethod;
using Helper;
using Newtonsoft.Json;

namespace Helper.Controllers.Admin
{
    [RoutePrefix("api/product")]
    public class ProductsController : ApiController
    {
        private GrandShoesEntities db = new GrandShoesEntities();
        public ProductsController()
        {
            db.Configuration.LazyLoadingEnabled = false;
            db.Configuration.ProxyCreationEnabled = false;
        }
        [HttpGet]
        [Route("getByProductSKU")]
        public List<Product> GetList(string productSku)
        {
            var list = db.Products.Where(x => x.IsActive == true && x.ProductSKU == productSku).ToList().RemoveReferences();
            return list;
        }
        [HttpGet]
        [AllowAnonymous]
        [Route("getFreeGift")]
        public List<Product> GetFreeGift()
        {
            var list = db.Products.Where(x => x.IsActive == true && x.IsAllowZero == true).OrderByDescending(x => x.Id).Include(x => x.Buyer).Include(x => x.Template).Include(x => x.ProductCategory).Include(x => x.ProductGrp).Include(x => x.ProductSource).Include(x => x.Season).Include(x => x.SizeGrid).Include(x => x.Supplier).Include(x => x.Year).ToList();
            return list.RemoveReferences();
        }
       
        [HttpPost]
        [Route("getProduct")]
        public Product GetProduct(string ProductSKU,string StyleSKU)
        {
            var list = db.Products.Where(x => x.IsActive == true && x.ProductSKU.Contains(ProductSKU)).ToList().RemoveReferences();
            var product = list.Where(x => x.StyleSKU == StyleSKU).FirstOrDefault();
            return product;
        }
        [HttpGet]
        [Route("checkValidation")]
        public IHttpActionResult CheckValidation(string id)
        {
            
            string sku = id.Substring(0, 3);
            string style = id.Substring(3, id.Length-3);
            var product = db.Products.Where(x => x.IsActive == true && x.StyleSKU == style && x.ProductSKU == sku).FirstOrDefault();
			if (product == null)
			{
				return Ok(false);
			}
            return Ok(true);
        }
        // GET: api/Products
        [HttpGet]
        [AllowAnonymous]
        [Route("getDetails")]
        public List<Product> GetProducts()
        {
            var list = db.Products.Where(x => x.IsActive == true && x.IsAllowZero==false).OrderByDescending(x => x.Id).Include(x=>x.Buyer).Include(x=>x.Template).Include(x=>x.ProductCategory).Include(x=>x.ProductGrp).Include(x=>x.ProductSource).Include(x=>x.Season).Include(x=>x.SizeGrid).Include(x=>x.Supplier).Include(x=>x.Year).ToList();
            return list.RemoveReferences();
        }
        [HttpGet]
        [AllowAnonymous]
        [Route("checkProductSKU")]
        public bool GetCode(string chk1,string chk2)
        {

            var data = db.Products.Any(x => x.ProductSKU.Contains(chk1) && x.IsActive == true && x.StyleSKU.Contains(chk2));
            return data;
        }
		
        [HttpPost]
        [Route("getProductId")]
        public IHttpActionResult ProductId(MarkDownAddModel model)
        {
            var productList = db.Products.Where(x => x.IsActive == true && x.ProductSKU == model.MarkDown.ProductSKU.ToString()).ToList().RemoveReferences();
            var product = productList.Where(x => x.StyleSKU == model.MarkDown.StyleSKU).FirstOrDefault();
            return Ok(product);
        }
        [HttpPost]
        [AllowAnonymous]
        [Route("checkBarcode")]
        public bool GetBarCode(string chk)
        {

            var data = db.Products.Any(x =>x.IsActive == true);
            return data;
        }
        [HttpGet]
        [AllowAnonymous]
        [Route("getProductDetails")]
        public List<Product> GetAllProducts()
        {
            var list = db.Products.Where(x => x.IsActive == true).Include(x => x.Buyer).Include(x => x.Template).Include(x => x.ProductCategory).Include(x => x.ProductGrp).Include(x => x.ProductSource).Include(x => x.Season).Include(x => x.SizeGrid).Include(x => x.Supplier).Include(x => x.Year).ToList();

            return list.RemoveReferences();
        }
        [HttpGet]
        [AllowAnonymous]
        [Route("getDetail")]
        [ResponseType(typeof(DAL.Product))]
        public IHttpActionResult GetProduct(int id)
        {
            var product = db.Products.Where(x=>x.Id==id).Include(x=>x.Color).Include(x=>x.Supplier).Include(x=>x.Buyer).Include(x=>x.ProductCategory).Include(x=>x.ProductGrp).Include(x=>x.ProductSource).Include(x=>x.Season).Include(x=>x.SizeGrid).Include(x=>x.Template).FirstOrDefault().RemoveReferences();
           // product.ProductVariances = db.ProductVariances.Where(x => x.IsActive == true && x.ProductID == id).ToList();
            if (product == null)
            {
                return NotFound();
            }

            return Ok(product);
        }
        [HttpGet]
        [AllowAnonymous]
        [Route("getProductPaging")]
        public ServiceResult<List<Product>> GetProductPaging([FromUri]Paging paging)

        {
            ServiceResult<List<Product>> model = new ServiceResult<List<Product>>();
            var source = db.Products.Where(x => x.IsActive == true)
                        .OrderByDescending(x =>x.Id).ToList().RemoveReferences();
            int count = source.Count();
           
            // Parameter is passed from Query string if it is null then it default Value will be pageNumber:1  
            int CurrentPage = paging.pageNumber;

            // Parameter is passed from Query string if it is null then it default Value will be pageSize:20  
            int PageSize = 6;

            // Display TotalCount to Records to User  
            int TotalCount = count;

            // Calculating Totalpage by Dividing (No of Records / Pagesize)  
            int TotalPages = (int)Math.Ceiling(count / (double)PageSize);

            // Returns List of Customer after applying Paging   
            var items = source.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
            model.TotalCount = count;
            model.data = items;

            return model;

        }
        [HttpGet]
        [Route("ProductsAutocomplete")]
        public IHttpActionResult ProductsAutocomplete(string name)
        {
            var data = db.Products.Include(s => s.SizeGrid).Where(x => x.IsActive == true && x.ProductSKU.Contains(name)).ToList().Select(m => new ProductModel
            {
                ProductSKU = m.ProductSKU,
                Id = m.Id,
                SupplierStyle = m.SupplierStyle,
                SizeGridID = m.SizeGridID,
                autoCompleteSizeGrid = m.SizeGrid?.GridNumber,
                AvailableSize = m.AvailableSize,
				CostPrice = m.CostPrice.ToString(),
			}).ToList();
			var list = data.Select(x=>x.ProductSKU).Distinct();
            return Ok(list);
        }
		[HttpGet]
		[Route("StyleAutocomplete")]
		public IHttpActionResult StylesAutocomplete(string name)
		{
			var data = db.Products.Include(s => s.SizeGrid).Where(x => x.IsActive == true && x.StyleSKU.Contains(name)).ToList().Select(m => new ProductModel
			{
				StyleSKU = m.StyleSKU,
				Id = m.Id,
				
			}).ToList();
			var list = data.Select(x => x.StyleSKU).Distinct();
			return Ok(list);
		}
		[HttpGet]
        [Route("ProductStyleAutocomplete")]
        public IHttpActionResult ProductStyleAutocomplete(string name,string id)
        {
            var data=db.Products.Include(c=>c.Color).Include(c => c.SizeGrid).Where(x=>x.IsActive==true && x.StyleSKU.Contains(name) && x.ProductSKU==id).ToList().Select(m=>new ProductModel
            {

                StyleSKU = m.StyleSKU,
                Id = m.Id,
                AutoCompleteColorCode=m.Color.Code,
                SupplierStyle = m.SupplierStyle,
                SizeGridID = m.SizeGridID,
                autoCompleteSizeGrid = m.SizeGrid?.GridNumber,
                AvailableSize = m.AvailableSize,
				CostPrice=m.CostPrice.ToString(),
            }).ToList();
            return Ok(data);
        }

       [HttpGet]
        [Route("ProductsAutocompleteSelected")]
        public IHttpActionResult ProductsAutocompleteSelected(string name,int? id)
        {
            var data = db.Products.Include(s => s.SizeGrid).Where(x => x.IsActive == true && x.ProductSKU.Contains(name)).ToList().Select(m => new ProductModel
            {
                ProductSKU = m.ProductSKU,
                Id = m.Id,
                SupplierStyle = m.SupplierStyle,
                SizeGridID = m.SizeGridID,
                autoCompleteSizeGrid = m.SizeGrid?.GridNumber,
                AvailableSize = m.AvailableSize,
				CostPrice = m.CostPrice.ToString(),
			}).ToList();
            return Ok(data);
        }
        [HttpPost]
        [AllowAnonymous]
        [Route("getProducts")]
        public ServiceResult<List<Product>> GetProducts(Model.ProdSearch prodSearch)
        {
            var pageSize = 6;
            ServiceResult<List<Product>> model = new ServiceResult<List<Product>>();
            //var list1 = db.Products.Where(x => x.IsActive == true)
            //            .Include(x => x.Color).OrderByDescending(x => x.Id)
            //            .Include(x => x.ProductStyle).ToList();
            var list = db.Products.Where(x => x.IsActive == true && x.IsAllowZero==false)
                       .Include(x=>x.Season);
			List<Product> Temp = list.ToList();
			if (prodSearch != null)
            {
                if (prodSearch.IsActive == false)
                {
                    list = db.Products.Where(n => n.IsActive == false);
                }
				
				if (!string.IsNullOrEmpty(prodSearch.Colors))
                {
                    string colors = prodSearch.Colors;
                    if (colors != "null")
                    {
                        string[] values = colors.Split(',');
                        var l = values.Count();
                        for (int i = 0; i < l; i++)
                        {
                            var k = 0;
                            var vals = values[i];
                            k = Convert.ToInt32(vals);
                            if (vals != "")
                            {
                                list = list.Where(x => x.ColorID == k);
                                Temp.AddRange(list.Where(x => x.ColorID == k));
                                Temp.AddRange(list.Where(x => x.Color.Code == vals));
                            }
                        }
					
                    }
                }
                if (!string.IsNullOrEmpty(prodSearch.AutocompleteProductSKU))
                {
                   // Temp.AddRange(list.Where(x => x.ProductSKU == prodSearch.AutocompleteProductSKU));
                    list = list.Where(x => x.ProductSKU == prodSearch.AutocompleteProductSKU);
                }
				if(!string.IsNullOrEmpty(prodSearch.AutocompleteStyleSKU))
				{
					if (!string.IsNullOrEmpty(prodSearch.AutocompleteProductSKU))
					{
						list=list.Where(x => x.ProductSKU == prodSearch.AutocompleteProductSKU && x.StyleSKU==prodSearch.AutocompleteStyleSKU);
					}
					else
					{
						list.Where(x => x.StyleSKU == prodSearch.AutocompleteStyleSKU);
					}
				}
                if (!string.IsNullOrEmpty(prodSearch.AutocompleteSeason))
                {
                   // Temp.AddRange(list.Where(x => x.Season.Code == prodSearch.AutocompleteSeason));
                   list = list.Where(x => x.Season.Code == prodSearch.AutocompleteSeason);
                }
                if (prodSearch.MaxPrice<=999 && prodSearch.MinPrice>=30)
                {
                    //Temp.AddRange(list.Where(x => x.CostPrice >= prodSearch.MinPrice && x.CostPrice <= prodSearch.MaxPrice));
                   list = list.Where(x => x.CostPrice >= prodSearch.MinPrice  && x.CostPrice<=prodSearch.MaxPrice);
                }
                //if (prodSearch.MinPrice >= 0)
                //{
                //    list = list.Where(x => x.CostPrice >= prodSearch.MinPrice);
                //   // Temp.AddRange(list.Where(x => x.CostPrice >= prodSearch.MinPrice));
                //}
            }
           var result =list.ToList();
            int count = result.Count();
            var items = result.OrderByDescending(x => x.Id).Skip(((prodSearch.Page ?? 1) - 1) * pageSize).Take(pageSize).ToList();
            model.data = items.Select(x => new Product
            {
                Id = x.Id,
                PrimaryImage = x.PrimaryImage,
                StyleSKU=x.StyleSKU,
                CostPrice = x.CostPrice,
                ProductSKU = x.ProductSKU,
                Season = x.Season
            }).ToList().RemoveReferences();
            model.TotalCount = count;

            return model;

        }
        [HttpPost]
        [Route("checkProductSKU")]
        public bool GetEmail(Product model)
        {
            if (model.Id > 0)
            {
                var code = db.Products.Where(x => x.Id == model.Id && x.IsActive == true).FirstOrDefault();
                if (code.ProductSKU.Equals(model.ProductSKU))
                {
                    return false;
                }

            }
            var data = db.Products.Any(x => x.ProductSKU == model.ProductSKU && x.IsActive == true);
            return data;
        }
        [HttpPost]
        [AllowAnonymous]
        [Route("ProductSearch")]
        public List<Product> GetProductSearch(Model.ProdSearch prodSearch)
        {
            var list = db.Products.Where(n => n.IsActive == true).OrderByDescending(x => x.Id).ToList();
          
            if (prodSearch != null)
            {

              
                if (!string.IsNullOrEmpty(prodSearch.ProductSKU))
                {
                    list = list.Where(x => x.ProductSKU.ToLower().Equals(prodSearch.ProductSKU.ToLower())&& x.IsActive == true).ToList();
                }
                if (!string.IsNullOrEmpty(prodSearch.StyleSKU))
                {
                    list = list.Where(x => x.StyleSKU.ToLower().Contains(prodSearch.StyleSKU.ToLower()) && x.IsActive == true).ToList();
                }

            }
           
            return list.RemoveReferences();
        }
		[HttpPost]
		[Route("addList")]
		public IHttpActionResult CreateList(Dictionary<int,Product> list)
		{
            Dictionary<string, string> result = new Dictionary<string, string>();
			string Message = string.Empty;
			foreach(var item in list)
			{
                result.Add(item.Key + "#" + item.Value.ProductSKU + "#" + item.Value.StyleSKU, "");
                try
				{
					db.Products.Add(item.Value);
                    result[item.Key+"#"+item.Value.ProductSKU + "#" + item.Value.StyleSKU] = "Add";
                    db.SaveChanges();
				}catch(Exception ex)
				{
                    if(ex.Message != null)
                    {
                        result[item.Key + "#" + item.Value.ProductSKU + "#" + item.Value.StyleSKU] = ex.Message;
                    }
				}
			}
			return Ok(result);
		}
        [HttpPost]
        [Route("updateList")]
        public IHttpActionResult UpdateList(Dictionary<int,Product> list)
        {
            Dictionary<string, string> result = new Dictionary<string, string>();
            string Message = string.Empty;
            foreach (var item in list)
            {
                result.Add(item.Key + "#" + item.Value.ProductSKU + "#" + item.Value.StyleSKU, "");
                Product obj = db.Products.Where(x => x.ProductSKU == item.Value.ProductSKU && x.StyleSKU == item.Value.StyleSKU).FirstOrDefault();
                
                obj.ActualSellingPrice = item.Value.ActualSellingPrice ?? 0;
                obj.AvailableSize = item.Value.AvailableSize;
                obj.Barcode = item.Value.Barcode;
                obj.BuyerID = item.Value.BuyerID;
                obj.ColorID = item.Value.ColorID;
                obj.CostPrice = item.Value.CostPrice;
                obj.CostPriceUSD = item.Value.CostPriceUSD;
                obj.CreatedOn = item.Value.CreatedOn;
                obj.DefaultTemplateID = item.Value.DefaultTemplateID;
                obj.Image1 = item.Value.Image1;
                obj.Image2 = item.Value.Image2;
                obj.Image3 = item.Value.Image3;
                obj.Image4 = item.Value.Image4;
                obj.IsActive = item.Value.IsActive;
                obj.IsAllowZero = item.Value.IsAllowZero;
                obj.IsConsignment = item.Value.IsConsignment;
                obj.IsDiscontinue = item.Value.IsDiscontinue;
                obj.IsFreeGift = item.Value.IsFreeGift;
                obj.IsMarkDown = item.Value.IsMarkDown;
                obj.IsVPI = item.Value.IsVPI;
                obj.LogId = item.Value.LogId;
                obj.LongDescription = item.Value.LongDescription;
                obj.MarkDownTemplateID = item.Value.MarkDownTemplateID;
                obj.PrimaryImage = item.Value.PrimaryImage;
                obj.ProductCategoryID = item.Value.ProductCategoryID;
                obj.ProductGroupID = item.Value.ProductGroupID;
                obj.ProductSKU = item.Value.ProductSKU;
                obj.ProductSourceID = item.Value.ProductSourceID;

                obj.StyleSKU = item.Value.StyleSKU;
                obj.RecommendedSellingPrice = item.Value.RecommendedSellingPrice;
                obj.SeasonID = item.Value.SeasonID;
                obj.ShortDescription = item.Value.ShortDescription;
                obj.SizeGridID = item.Value.SizeGridID;
                obj.SupplierID = item.Value.SupplierID;
                obj.SupplierStyle = item.Value.SupplierStyle;
                obj.UpdatedOn = item.Value.UpdatedOn;
                obj.YearID = item.Value.YearID;
                try
                {
                    result[item.Key + "#" + item.Value.ProductSKU + "#" + item.Value.StyleSKU] = "Update";
                    db.SaveChanges();
                }
                catch (Exception ex)
                {
                    if (ex.Message != null)
                    {
                        result[item.Key + "#" + item.Value.ProductSKU + "#" + item.Value.StyleSKU] = ex.Message;
                    }
                }

            }

            return Ok(result);
        }
        [HttpGet]
        [AllowAnonymous]
        [Route("getCode")]
        public IQueryable<string> GetProductCode()
        {
            var list = from s in db.Products.Where(x => x.IsActive == true)
                       select s.ProductSKU;
            return list;
        }
        [HttpPost]
        [AllowAnonymous]
        [Route("edit")]
        [ResponseType(typeof(void))]
        public IHttpActionResult PutProduct(DAL.Product product)
        {
			var list = new List<Product>();
			
			var model = db.Products.Where(x => x.IsActive == true && x.Id ==product.Id).FirstOrDefault();
            model.Id = product.Id;
            model.Image1 = product.Image1;
            model.Image2 = product.Image2;
            model.Image3 = product.Image3;
            model.Image4 = product.Image4;
            model.IsActive = true;
            model.IsAllowZero = product.IsAllowZero;
            model.IsConsignment = product.IsConsignment;
            model.IsDiscontinue = product.IsDiscontinue;
            model.IsFreeGift = product.IsFreeGift;
            model.IsMarkDown = product.IsMarkDown;
            model.IsVPI = product.IsVPI;
            model.LogId = product.LogId;
			model.CostPrice = product.CostPrice;
            // model.Log = db.Logs.Where(x => x.IsActive == true).FirstOrDefault();
            model.LongDescription = product.LongDescription;
            model.MarkDownTemplateID = product.MarkDownTemplateID;
            model.PrimaryImage = product.PrimaryImage;
            model.ProductCategoryID = product.ProductCategoryID;
			model.ColorID = product.ColorID;
			model.Color = db.Colors.Where(x => x.IsActive == true && x.Id == model.ColorID).FirstOrDefault();
            model.ProductCategory = db.ProductCategories.Where(x => x.IsActive == true && x.Id == model.ProductCategoryID).FirstOrDefault();
            model.ProductGroupID = product.ProductGroupID;
            model.ProductGrp = db.ProductGrps.Where(x => x.IsActive == true && x.ID== product.ProductGroupID).FirstOrDefault();
            model.ProductSizes = product.ProductSizes;
            model.ProductSKU = product.ProductSKU;
            model.ProductSourceID = product.ProductSourceID;
            model.ProductSource = db.ProductSources.Where(x => x.IsActive == true && x.Id == product.ProductSourceID).FirstOrDefault();
			model.StyleSKU = product.StyleSKU;
          //  model.ProductStyle = db.ProductStyles.Where(x => x.IsActive == true && x.Id == product.ProductStyleId).FirstOrDefault();
            model.RecommendedSellingPrice = product.RecommendedSellingPrice;
            model.SeasonID = product.SeasonID;
            model.Season = db.Seasons.Where(x => x.IsActive == true && x.Id == product.SeasonID).FirstOrDefault();
            model.ShortDescription = product.ShortDescription;
            model.SizeGridID = product.SizeGridID;
            model.SizeGrid = db.SizeGrids.Where(x => x.IsActive == true && x.Id == product.SizeGridID).FirstOrDefault();
            model.SupplierID = product.SupplierID;
            model.Supplier = db.Suppliers.Where(x => x.IsActive == true && x.Id == product.SupplierID).FirstOrDefault();
            model.SupplierStyle = product.SupplierStyle;
			//   model.UpdatedOn = product.UpdatedOn;
			model.MarkDownTemplateID = product.MarkDownTemplateID;
			model.DefaultTemplateID = product.DefaultTemplateID;
			model.Barcode = model.StyleSKU + model.ProductSKU + model.Color.Code;
            model.YearID = product.YearID;
			model.CreatedOn = product.CreatedOn;
			model.AvailableSize = product.AvailableSize;
			model.SupplierStyle = product.SupplierStyle;
            model.Year = db.Years.Where(x => x.IsActive == true && x.Id == product.YearID).FirstOrDefault();
			db.SaveChanges();
			return Ok(true);
        }
        [HttpPost]
        [Route("editByMark")]
        public IHttpActionResult EditByMark(Product product)
        {
            var model = db.Products.Where(x => x.IsActive == true && x.Id == product.Id).FirstOrDefault();
            model.Id = product.Id;
            model.Image1 = product.Image1;
            model.Image2 = product.Image2;
            model.Image3 = product.Image3;
            model.Image4 = product.Image4;
            model.IsActive = true;
            model.IsAllowZero = product.IsAllowZero;
            model.IsConsignment = product.IsConsignment;
            model.IsDiscontinue = product.IsDiscontinue;
            model.IsFreeGift = product.IsFreeGift;
            model.IsMarkDown = true;
            model.IsVPI = product.IsVPI;
            model.LogId = product.LogId;
            // model.Log = db.Logs.Where(x => x.IsActive == true).FirstOrDefault();
            model.LongDescription = product.LongDescription;
            model.MarkDownTemplateID = product.MarkDownTemplateID;
            model.PrimaryImage = product.PrimaryImage;
            model.ProductCategoryID = product.ProductCategoryID;
            model.ProductCategory = db.ProductCategories.Where(x => x.IsActive == true && x.Id == model.ProductCategoryID).FirstOrDefault();
            model.ProductGroupID = product.ProductGroupID;
            model.ProductGrp = db.ProductGrps.Where(x => x.IsActive == true && x.ID == product.ProductGroupID).FirstOrDefault();
            model.ProductSizes = product.ProductSizes;
            model.ProductSKU = product.ProductSKU;
            model.ProductSourceID = product.ProductSourceID;
            model.ProductSource = db.ProductSources.Where(x => x.IsActive == true && x.Id == product.ProductSourceID).FirstOrDefault();
           // model.ProductStyleId = product.ProductStyleId;
          //  model.ProductStyle = db.ProductStyles.Where(x => x.IsActive == true && x.Id == product.ProductStyleId).FirstOrDefault();
            model.RecommendedSellingPrice = product.RecommendedSellingPrice;
            model.SeasonID = product.SeasonID;
            model.Season = db.Seasons.Where(x => x.IsActive == true && x.Id == product.SeasonID).FirstOrDefault();
            model.ShortDescription = product.ShortDescription;
            model.SizeGridID = product.SizeGridID;
            model.SizeGrid = db.SizeGrids.Where(x => x.IsActive == true && x.Id == product.SizeGridID).FirstOrDefault();
            model.SupplierID = product.SupplierID;
            model.Supplier = db.Suppliers.Where(x => x.IsActive == true && x.Id == product.SupplierID).FirstOrDefault();
            model.SupplierStyle = product.SupplierStyle;
            model.UpdatedOn = product.UpdatedOn;
            model.YearID = product.YearID;
			model.MarkDownTemplateID = product.MarkDownTemplateID;
			model.DefaultTemplateID = product.DefaultTemplateID;
			model.Year = db.Years.Where(x => x.IsActive == true && x.Id == product.YearID).FirstOrDefault();
            db.SaveChanges();
            return Ok(true);
        }
        [HttpPost]
        [AllowAnonymous]
        [Route("create")]
        [ResponseType(typeof(DAL.Product))]
        public IHttpActionResult PostProduct(Product product)
        {
			var pageName = Request.RequestUri.LocalPath.getRouteName();
			Object obj = null;
			var UserId = 0;
			if (Request.Headers.Contains("Email"))
			{
				var email = ((string[])(Request.Headers.GetValues("Email")))[0].ToString();
				UserId = db.Users.Where(x => x.IsActive == true && x.Email.Contains(email)).FirstOrDefault().Id;
			}
			Product model = new Product();
            model.ActualSellingPrice = Convert.ToDecimal(product.ActualSellingPrice);
            model.AvailableSize = product.AvailableSize;
            model.Barcode = product.Barcode;
            model.BuyerID = product.BuyerID;
            model.ColorID = product.ColorID;
            model.CostPrice = product.CostPrice;
            model.CostPriceUSD = product.CostPriceUSD;
			model.CreatedOn = product.CreatedOn;
            model.DefaultTemplateID = product.DefaultTemplateID;
            model.Image1 = product.Image1;
            model.Image2 = product.Image2;
            model.Image3 = product.Image3;
            model.Image4 = product.Image4;
            model.IsActive = true;
            model.SupplierStyle = product.SupplierStyle;
            model.IsAllowZero = product.IsAllowZero;
            model.IsConsignment = product.IsConsignment;
            model.IsDiscontinue = product.IsDiscontinue;
            model.IsFreeGift = product.IsFreeGift;
            model.IsMarkDown = product.IsMarkDown;
            model.PrimaryImage = product.PrimaryImage;
            model.ProductCategoryID = product.ProductCategoryID;
            model.ProductGroupID = product.ProductGroupID;
            model.ProductSKU = product.ProductSKU;
            model.ProductSourceID = product.ProductSourceID;
           model.StyleSKU = product.StyleSKU;
            model.SeasonID = product.SeasonID;
            model.SizeGridID = product.SizeGridID;
            model.ShortDescription = product.ShortDescription;
            model.SupplierID = product.SupplierID;
            model.SupplierStyle = product.SupplierStyle;
            model.UpdatedOn =product.UpdatedOn;
            model.YearID = product.YearID;
			model.MarkDownTemplateID = product.MarkDownTemplateID;
			model.DefaultTemplateID = product.DefaultTemplateID;
            model.RecommendedSellingPrice = Convert.ToDecimal(product.RecommendedSellingPrice);
            //model.LogId = product.LogId;
            model.LongDescription = product.LongDescription;
            db.Products.Add(model);
			try
			{
				db.SaveChanges();
			}
			catch (Exception ex) { obj = ex; }
			finally
			{
				if (obj == null)
				{

					var logTable = Newtonsoft.Json.JsonConvert.SerializeObject(product, new JsonSerializerSettings()
					{
						PreserveReferencesHandling = PreserveReferencesHandling.Objects,
						Formatting = Formatting.Indented
					});
					var flag = product.CreateLog(pageName, logTable, UserId);
				}
			}
			return Ok(true);
        }

        [HttpPost]
        [AllowAnonymous]
        [Route("delete")]
        [ResponseType(typeof(Product))]
        public IHttpActionResult DeleteProduct(int id)
        {
            Product product = db.Products.Find(id);
            if (product == null)
            {
                return NotFound();
            }
            product.IsActive = false;
            //db.ProductCategories.Remove(productCategory);
            db.SaveChanges();

            return Ok(product);
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }

        private bool ProductExists(int id)
        {
            return db.Products.Count(e => e.Id == id) > 0;
        }
    }
}